{"ast":null,"code":"import '@firebase/installations';\nimport { Component } from '@firebase/component';\nimport { openDb, deleteDb } from 'idb';\nimport { ErrorFactory, isIndexedDBAvailable, validateIndexedDBOpenable, getModularInstance } from '@firebase/util';\nimport { _registerComponent, getApp, _getProvider } from '@firebase/app';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst DEFAULT_VAPID_KEY = 'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\nconst ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n/** Key of FCM Payload in Notification's data field. */\n\nconst FCM_MSG = 'FCM_MSG';\nconst CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id'; // Defined as in proto/messaging_event.proto. Neglecting fields that are supported.\n\nconst SDK_PLATFORM_WEB = 3;\nconst EVENT_MESSAGE_DELIVERED = 1;\nvar MessageType$1;\n\n(function (MessageType) {\n  MessageType[MessageType[\"DATA_MESSAGE\"] = 1] = \"DATA_MESSAGE\";\n  MessageType[MessageType[\"DISPLAY_NOTIFICATION\"] = 3] = \"DISPLAY_NOTIFICATION\";\n})(MessageType$1 || (MessageType$1 = {}));\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\r\n * in compliance with the License. You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n * or implied. See the License for the specific language governing permissions and limitations under\r\n * the License.\r\n */\n\n\nvar MessageType;\n\n(function (MessageType) {\n  MessageType[\"PUSH_RECEIVED\"] = \"push-received\";\n  MessageType[\"NOTIFICATION_CLICKED\"] = \"notification-clicked\";\n})(MessageType || (MessageType = {}));\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction arrayToBase64(array) {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nfunction base64ToArray(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\r\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\r\n * callback is called for all versions of the old DB.\r\n */\n\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nasync function migrateOldDatabase(senderId) {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await indexedDB.databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails = null;\n  const db = await openDb(OLD_DB_NAME, OLD_DB_VERSION, async db => {\n    var _a;\n\n    if (db.oldVersion < 2) {\n      // Database too old, skip migration.\n      return;\n    }\n\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n      // Database did not exist. Nothing to do.\n      return;\n    }\n\n    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n    const value = await objectStore.index('fcmSenderId').get(senderId);\n    await objectStore.clear();\n\n    if (!value) {\n      // No entry in the database, nothing to migrate.\n      return;\n    }\n\n    if (db.oldVersion === 2) {\n      const oldDetails = value;\n\n      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n        return;\n      }\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: (_a = oldDetails.createTime) !== null && _a !== void 0 ? _a : Date.now(),\n        subscriptionOptions: {\n          auth: oldDetails.auth,\n          p256dh: oldDetails.p256dh,\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: typeof oldDetails.vapidKey === 'string' ? oldDetails.vapidKey : arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 3) {\n      const oldDetails = value;\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 4) {\n      const oldDetails = value;\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    }\n  });\n  db.close(); // Delete all old databases.\n\n  await deleteDb(OLD_DB_NAME);\n  await deleteDb('fcm_vapid_details_db');\n  await deleteDb('undefined');\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(tokenDetails) {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n\n  const {\n    subscriptionOptions\n  } = tokenDetails;\n  return typeof tokenDetails.createTime === 'number' && tokenDetails.createTime > 0 && typeof tokenDetails.token === 'string' && tokenDetails.token.length > 0 && typeof subscriptionOptions.auth === 'string' && subscriptionOptions.auth.length > 0 && typeof subscriptionOptions.p256dh === 'string' && subscriptionOptions.p256dh.length > 0 && typeof subscriptionOptions.endpoint === 'string' && subscriptionOptions.endpoint.length > 0 && typeof subscriptionOptions.swScope === 'string' && subscriptionOptions.swScope.length > 0 && typeof subscriptionOptions.vapidKey === 'string' && subscriptionOptions.vapidKey.length > 0;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Exported for tests.\n\n\nconst DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\nlet dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {\n      // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n      // because if there are multiple versions between the old version and the current version, we\n      // want ALL the migrations that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n\n  return dbPromise;\n}\n/** Gets record(s) from the objectStore that match the given key. */\n\n\nasync function dbGet(firebaseDependencies) {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db.transaction(OBJECT_STORE_NAME).objectStore(OBJECT_STORE_NAME).get(key);\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(firebaseDependencies.appConfig.senderId);\n\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n/** Assigns or overwrites the record for the given key with the given value. */\n\n\nasync function dbSet(firebaseDependencies, tokenDetails) {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.complete;\n  return tokenDetails;\n}\n/** Removes record(s) from the objectStore that match the given key. */\n\n\nasync function dbRemove(firebaseDependencies) {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\nfunction getKey(_ref) {\n  let {\n    appConfig\n  } = _ref;\n  return appConfig.appId;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst ERROR_MAP = {\n  [\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  ]: 'Missing App configuration value: \"{$valueName}\"',\n  [\"only-available-in-window\"\n  /* AVAILABLE_IN_WINDOW */\n  ]: 'This method is available in a Window context.',\n  [\"only-available-in-sw\"\n  /* AVAILABLE_IN_SW */\n  ]: 'This method is available in a service worker context.',\n  [\"permission-default\"\n  /* PERMISSION_DEFAULT */\n  ]: 'The notification permission was not granted and dismissed instead.',\n  [\"permission-blocked\"\n  /* PERMISSION_BLOCKED */\n  ]: 'The notification permission was not granted and blocked instead.',\n  [\"unsupported-browser\"\n  /* UNSUPPORTED_BROWSER */\n  ]: \"This browser doesn't support the API's required to use the Firebase SDK.\",\n  [\"indexed-db-unsupported\"\n  /* INDEXED_DB_UNSUPPORTED */\n  ]: \"This browser doesn't support indexedDb.open() (ex. Safari iFrame, Firefox Private Browsing, etc)\",\n  [\"failed-service-worker-registration\"\n  /* FAILED_DEFAULT_REGISTRATION */\n  ]: 'We are unable to register the default service worker. {$browserErrorMessage}',\n  [\"token-subscribe-failed\"\n  /* TOKEN_SUBSCRIBE_FAILED */\n  ]: 'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [\"token-subscribe-no-token\"\n  /* TOKEN_SUBSCRIBE_NO_TOKEN */\n  ]: 'FCM returned no token when subscribing the user to push.',\n  [\"token-unsubscribe-failed\"\n  /* TOKEN_UNSUBSCRIBE_FAILED */\n  ]: 'A problem occurred while unsubscribing the ' + 'user from FCM: {$errorInfo}',\n  [\"token-update-failed\"\n  /* TOKEN_UPDATE_FAILED */\n  ]: 'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [\"token-update-no-token\"\n  /* TOKEN_UPDATE_NO_TOKEN */\n  ]: 'FCM returned no token when updating the user to push.',\n  [\"use-sw-after-get-token\"\n  /* USE_SW_AFTER_GET_TOKEN */\n  ]: 'The useServiceWorker() method may only be called once and must be ' + 'called before calling getToken() to ensure your service worker is used.',\n  [\"invalid-sw-registration\"\n  /* INVALID_SW_REGISTRATION */\n  ]: 'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [\"invalid-bg-handler\"\n  /* INVALID_BG_HANDLER */\n  ]: 'The input to setBackgroundMessageHandler() must be a function.',\n  [\"invalid-vapid-key\"\n  /* INVALID_VAPID_KEY */\n  ]: 'The public VAPID key must be a string.',\n  [\"use-vapid-key-after-get-token\"\n  /* USE_VAPID_KEY_AFTER_GET_TOKEN */\n  ]: 'The usePublicVapidKey() method may only be called once and must be ' + 'called before calling getToken() to ensure your VAPID key is used.'\n};\nconst ERROR_FACTORY = new ErrorFactory('messaging', 'Messaging', ERROR_MAP);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nasync function requestGetToken(firebaseDependencies, subscriptionOptions) {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n  let responseData;\n\n  try {\n    const response = await fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions);\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(\"token-subscribe-failed\"\n    /* TOKEN_SUBSCRIBE_FAILED */\n    , {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(\"token-subscribe-failed\"\n    /* TOKEN_SUBSCRIBE_FAILED */\n    , {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(\"token-subscribe-no-token\"\n    /* TOKEN_SUBSCRIBE_NO_TOKEN */\n    );\n  }\n\n  return responseData.token;\n}\n\nasync function requestUpdateToken(firebaseDependencies, tokenDetails) {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions);\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n  let responseData;\n\n  try {\n    const response = await fetch(`${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`, updateOptions);\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(\"token-update-failed\"\n    /* TOKEN_UPDATE_FAILED */\n    , {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(\"token-update-failed\"\n    /* TOKEN_UPDATE_FAILED */\n    , {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(\"token-update-no-token\"\n    /* TOKEN_UPDATE_NO_TOKEN */\n    );\n  }\n\n  return responseData.token;\n}\n\nasync function requestDeleteToken(firebaseDependencies, token) {\n  const headers = await getHeaders(firebaseDependencies);\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(`${getEndpoint(firebaseDependencies.appConfig)}/${token}`, unsubscribeOptions);\n    const responseData = await response.json();\n\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(\"token-unsubscribe-failed\"\n      /* TOKEN_UNSUBSCRIBE_FAILED */\n      , {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(\"token-unsubscribe-failed\"\n    /* TOKEN_UNSUBSCRIBE_FAILED */\n    , {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint(_ref2) {\n  let {\n    projectId\n  } = _ref2;\n  return `${ENDPOINT}/projects/${projectId}/registrations`;\n}\n\nasync function getHeaders(_ref3) {\n  let {\n    appConfig,\n    installations\n  } = _ref3;\n  const authToken = await installations.getToken();\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody(_ref4) {\n  let {\n    p256dh,\n    auth,\n    endpoint,\n    vapidKey\n  } = _ref4;\n  const body = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// UpdateRegistration will be called once every week.\n\n\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nasync function getTokenInternal(messaging) {\n  const pushSubscription = await getPushSubscription(messaging.swRegistration, messaging.vapidKey);\n  const subscriptionOptions = {\n    vapidKey: messaging.vapidKey,\n    swScope: messaging.swRegistration.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh'))\n  };\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\n  } else if (!isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions)) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token);\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(messaging, {\n      token: tokenDetails.token,\n      createTime: Date.now(),\n      subscriptionOptions\n    });\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n/**\r\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\r\n * the push subscription if it exists.\r\n */\n\n\nasync function deleteTokenInternal(messaging) {\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n\n  if (tokenDetails) {\n    await requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token);\n    await dbRemove(messaging.firebaseDependencies);\n  } // Unsubscribe from the push subscription.\n\n\n  const pushSubscription = await messaging.swRegistration.pushManager.getSubscription();\n\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  } // If there's no SW, consider it a success.\n\n\n  return true;\n}\n\nasync function updateToken(messaging, tokenDetails) {\n  try {\n    const updatedToken = await requestUpdateToken(messaging.firebaseDependencies, tokenDetails);\n    const updatedTokenDetails = Object.assign(Object.assign({}, tokenDetails), {\n      token: updatedToken,\n      createTime: Date.now()\n    });\n    await dbSet(messaging.firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteTokenInternal(messaging);\n    throw e;\n  }\n}\n\nasync function getNewToken(firebaseDependencies, subscriptionOptions) {\n  const token = await requestGetToken(firebaseDependencies, subscriptionOptions);\n  const tokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n/**\r\n * Gets a PushSubscription for the current user.\r\n */\n\n\nasync function getPushSubscription(swRegistration, vapidKey) {\n  const subscription = await swRegistration.pushManager.getSubscription();\n\n  if (subscription) {\n    return subscription;\n  }\n\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n/**\r\n * Checks if the saved tokenDetails object matches the configuration provided.\r\n */\n\n\nfunction isTokenValid(dbOptions, currentOptions) {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction externalizePayload(internalPayload) {\n  const payload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key,\n    // eslint-disable-next-line camelcase\n    messageId: internalPayload.fcmMessageId\n  };\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n  return payload;\n}\n\nfunction propagateNotificationPayload(payload, messagePayloadInternal) {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n  const title = messagePayloadInternal.notification.title;\n\n  if (!!title) {\n    payload.notification.title = title;\n  }\n\n  const body = messagePayloadInternal.notification.body;\n\n  if (!!body) {\n    payload.notification.body = body;\n  }\n\n  const image = messagePayloadInternal.notification.image;\n\n  if (!!image) {\n    payload.notification.image = image;\n  }\n}\n\nfunction propagateDataPayload(payload, messagePayloadInternal) {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data;\n}\n\nfunction propagateFcmOptions(payload, messagePayloadInternal) {\n  if (!messagePayloadInternal.fcmOptions) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n  const link = messagePayloadInternal.fcmOptions.link;\n\n  if (!!link) {\n    payload.fcmOptions.link = link;\n  } // eslint-disable-next-line camelcase\n\n\n  const analyticsLabel = messagePayloadInternal.fcmOptions.analytics_label;\n\n  if (!!analyticsLabel) {\n    payload.fcmOptions.analyticsLabel = analyticsLabel;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isConsoleMessage(data) {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a promise that resolves after given time passes. */\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\n_mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');\n\n_mergeStrings('AzSCbw63g1R0nCw85jG8', 'Iaya3yLKwmgvh7cF0q4');\n\nasync function stageLog(messaging, internalPayload) {\n  const fcmEvent = createFcmEvent(internalPayload, await messaging.firebaseDependencies.installations.getId());\n  createAndEnqueueLogEvent(messaging, fcmEvent);\n}\n\nfunction createFcmEvent(internalPayload, fid) {\n  var _a, _b;\n\n  const fcmEvent = {};\n  /* eslint-disable camelcase */\n  // some fields should always be non-null. Still check to ensure.\n\n  if (!!internalPayload.from) {\n    fcmEvent.project_number = internalPayload.from;\n  }\n\n  if (!!internalPayload.fcmMessageId) {\n    fcmEvent.message_id = internalPayload.fcmMessageId;\n  }\n\n  fcmEvent.instance_id = fid;\n\n  if (!!internalPayload.notification) {\n    fcmEvent.message_type = MessageType$1.DISPLAY_NOTIFICATION.toString();\n  } else {\n    fcmEvent.message_type = MessageType$1.DATA_MESSAGE.toString();\n  }\n\n  fcmEvent.sdk_platform = SDK_PLATFORM_WEB.toString();\n  fcmEvent.package_name = self.origin.replace(/(^\\w+:|^)\\/\\//, '');\n\n  if (!!internalPayload.collapse_key) {\n    fcmEvent.collapse_key = internalPayload.collapse_key;\n  }\n\n  fcmEvent.event = EVENT_MESSAGE_DELIVERED.toString();\n\n  if (!!((_a = internalPayload.fcmOptions) === null || _a === void 0 ? void 0 : _a.analytics_label)) {\n    fcmEvent.analytics_label = (_b = internalPayload.fcmOptions) === null || _b === void 0 ? void 0 : _b.analytics_label;\n  }\n  /* eslint-enable camelcase */\n\n\n  return fcmEvent;\n}\n\nfunction createAndEnqueueLogEvent(messaging, fcmEvent) {\n  const logEvent = {};\n  /* eslint-disable camelcase */\n\n  logEvent.event_time_ms = Math.floor(Date.now()).toString();\n  logEvent.source_extension_json_proto3 = JSON.stringify(fcmEvent); // eslint-disable-next-line camelcase\n\n  messaging.logEvents.push(logEvent);\n}\n\nfunction _mergeStrings(s1, s2) {\n  const resultArray = [];\n\n  for (let i = 0; i < s1.length; i++) {\n    resultArray.push(s1.charAt(i));\n\n    if (i < s2.length) {\n      resultArray.push(s2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nasync function onSubChange(event, messaging) {\n  var _a, _b;\n\n  const {\n    newSubscription\n  } = event;\n\n  if (!newSubscription) {\n    // Subscription revoked, delete token\n    await deleteTokenInternal(messaging);\n    return;\n  }\n\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  await deleteTokenInternal(messaging);\n  messaging.vapidKey = (_b = (_a = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a === void 0 ? void 0 : _a.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY;\n  await getTokenInternal(messaging);\n}\n\nasync function onPush(event, messaging) {\n  const internalPayload = getMessagePayloadInternal(event);\n\n  if (!internalPayload) {\n    // Failed to get parsed MessagePayload from the PushEvent. Skip handling the push.\n    return;\n  } // log to Firelog with user consent\n\n\n  if (messaging.deliveryMetricsExportedToBigQueryEnabled) {\n    await stageLog(messaging, internalPayload);\n  } // foreground handling: eventually passed to onMessage hook\n\n\n  const clientList = await getClientList();\n\n  if (hasVisibleClients(clientList)) {\n    return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n  } // background handling: display if possible and pass to onBackgroundMessage hook\n\n\n  if (!!internalPayload.notification) {\n    await showNotification(wrapInternalPayload(internalPayload));\n  }\n\n  if (!messaging) {\n    return;\n  }\n\n  if (!!messaging.onBackgroundMessageHandler) {\n    const payload = externalizePayload(internalPayload);\n\n    if (typeof messaging.onBackgroundMessageHandler === 'function') {\n      messaging.onBackgroundMessageHandler(payload);\n    } else {\n      messaging.onBackgroundMessageHandler.next(payload);\n    }\n  }\n}\n\nasync function onNotificationClick(event) {\n  var _a, _b;\n\n  const internalPayload = (_b = (_a = event.notification) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b[FCM_MSG];\n\n  if (!internalPayload) {\n    return;\n  } else if (event.action) {\n    // User clicked on an action button. This will allow developers to act on action button clicks\n    // by using a custom onNotificationClick listener that they define.\n    return;\n  } // Prevent other listeners from receiving the event\n\n\n  event.stopImmediatePropagation();\n  event.notification.close(); // Note clicking on a notification with no link set will focus the Chrome's current tab.\n\n  const link = getLink(internalPayload);\n\n  if (!link) {\n    return;\n  } // FM should only open/focus links from app's origin.\n\n\n  const url = new URL(link, self.location.href);\n  const originUrl = new URL(self.location.origin);\n\n  if (url.host !== originUrl.host) {\n    return;\n  }\n\n  let client = await getWindowClient(url);\n\n  if (!client) {\n    client = await self.clients.openWindow(link); // Wait three seconds for the client to initialize and set up the message handler so that it\n    // can receive the message.\n\n    await sleep(3000);\n  } else {\n    client = await client.focus();\n  }\n\n  if (!client) {\n    // Window Client will not be returned if it's for a third party origin.\n    return;\n  }\n\n  internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n  internalPayload.isFirebaseMessaging = true;\n  return client.postMessage(internalPayload);\n}\n\nfunction wrapInternalPayload(internalPayload) {\n  const wrappedInternalPayload = Object.assign({}, internalPayload.notification); // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal(_ref5) {\n  let {\n    data\n  } = _ref5;\n\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n/**\r\n * @param url The URL to look for when focusing a client.\r\n * @return Returns an existing window client or a newly opened WindowClient.\r\n */\n\n\nasync function getWindowClient(url) {\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n/**\r\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\r\n * otherwise false.\r\n */\n\n\nfunction hasVisibleClients(clientList) {\n  return clientList.some(client => client.visibilityState === 'visible' && // Ignore chrome-extension clients as that matches the background pages of extensions, which\n  // are always considered visible for some reason.\n  !client.url.startsWith('chrome-extension://'));\n}\n\nfunction sendMessagePayloadInternalToWindows(clientList, internalPayload) {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\n\nfunction getClientList() {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n\n  });\n}\n\nfunction showNotification(notificationPayloadInternal) {\n  var _a; // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n\n\n  const {\n    actions\n  } = notificationPayloadInternal;\n  const {\n    maxActions\n  } = Notification;\n\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(`This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`);\n  }\n\n  return self.registration.showNotification(\n  /* title= */\n  (_a = notificationPayloadInternal.title) !== null && _a !== void 0 ? _a : '', notificationPayloadInternal);\n}\n\nfunction getLink(payload) {\n  var _a, _b, _c; // eslint-disable-next-line camelcase\n\n\n  const link = (_b = (_a = payload.fcmOptions) === null || _a === void 0 ? void 0 : _a.link) !== null && _b !== void 0 ? _b : (_c = payload.notification) === null || _c === void 0 ? void 0 : _c.click_action;\n\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction extractAppConfig(app) {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  } // Required app config keys\n\n\n  const configKeys = ['projectId', 'apiKey', 'appId', 'messagingSenderId'];\n  const {\n    options\n  } = app;\n\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId,\n    apiKey: options.apiKey,\n    appId: options.appId,\n    senderId: options.messagingSenderId\n  };\n}\n\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\"\n  /* MISSING_APP_CONFIG_VALUES */\n  , {\n    valueName\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass MessagingService {\n  constructor(app, installations, analyticsProvider) {\n    // logging is only done with end user consent. Default to false.\n    this.deliveryMetricsExportedToBigQueryEnabled = false;\n    this.onBackgroundMessageHandler = null;\n    this.onMessageHandler = null;\n    this.logEvents = [];\n    this.isLogServiceStarted = false;\n    const appConfig = extractAppConfig(app);\n    this.firebaseDependencies = {\n      app,\n      appConfig,\n      installations,\n      analyticsProvider\n    };\n  }\n\n  _delete() {\n    return Promise.resolve();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst SwMessagingFactory = container => {\n  const messaging = new MessagingService(container.getProvider('app').getImmediate(), container.getProvider('installations-internal').getImmediate(), container.getProvider('analytics-internal'));\n  self.addEventListener('push', e => {\n    e.waitUntil(onPush(e, messaging));\n  });\n  self.addEventListener('pushsubscriptionchange', e => {\n    e.waitUntil(onSubChange(e, messaging));\n  });\n  self.addEventListener('notificationclick', e => {\n    e.waitUntil(onNotificationClick(e));\n  });\n  return messaging;\n};\n/**\r\n * The messaging instance registered in sw is named differently than that of in client. This is\r\n * because both `registerMessagingInWindow` and `registerMessagingInSw` would be called in\r\n * `messaging-compat` and component with the same name can only be registered once.\r\n */\n\n\nfunction registerMessagingInSw() {\n  _registerComponent(new Component('messaging-sw', SwMessagingFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ));\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Checks whether all required APIs exist within SW Context\r\n * @returns a Promise that resolves to a boolean.\r\n *\r\n * @public\r\n */\n\n\nasync function isSwSupported() {\n  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\n  // might be prohibited to run. In these contexts, an error would be thrown during the messaging\n  // instantiating phase, informing the developers to import/call isSupported for special handling.\n  return isIndexedDBAvailable() && (await validateIndexedDBOpenable()) && 'PushManager' in self && 'Notification' in self && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction onBackgroundMessage$1(messaging, nextOrObserver) {\n  if (self.document !== undefined) {\n    throw ERROR_FACTORY.create(\"only-available-in-sw\"\n    /* AVAILABLE_IN_SW */\n    );\n  }\n\n  messaging.onBackgroundMessageHandler = nextOrObserver;\n  return () => {\n    messaging.onBackgroundMessageHandler = null;\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable) {\n  messaging.deliveryMetricsExportedToBigQueryEnabled = enable;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Retrieves a Firebase Cloud Messaging instance.\r\n *\r\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\r\n *\r\n * @public\r\n */\n\n\nfunction getMessagingInSw() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isSwSupported().then(isSupported => {\n    // If `isSwSupported()` resolved, but returned false.\n    if (!isSupported) {\n      throw ERROR_FACTORY.create(\"unsupported-browser\"\n      /* UNSUPPORTED_BROWSER */\n      );\n    }\n  }, _ => {\n    // If `isSwSupported()` rejected.\n    throw ERROR_FACTORY.create(\"indexed-db-unsupported\"\n    /* INDEXED_DB_UNSUPPORTED */\n    );\n  });\n  return _getProvider(getModularInstance(app), 'messaging-sw').getImmediate();\n}\n/**\r\n * Called when a message is received while the app is in the background. An app is considered to be\r\n * in the background if no active window is displayed.\r\n *\r\n * @param messaging - The {@link Messaging} instance.\r\n * @param nextOrObserver - This function, or observer object with `next` defined, is called when a\r\n * message is received and the app is currently in the background.\r\n *\r\n * @returns To stop listening for messages execute this returned function\r\n *\r\n * @public\r\n */\n\n\nfunction onBackgroundMessage(messaging, nextOrObserver) {\n  messaging = getModularInstance(messaging);\n  return onBackgroundMessage$1(messaging, nextOrObserver);\n}\n/**\r\n * Enables or disables Firebase Cloud Messaging message delivery metrics export to BigQuery. By\r\n * default, message delivery metrics are not exported to BigQuery. Use this method to enable or\r\n * disable the export at runtime.\r\n *\r\n * @param messaging - The `FirebaseMessaging` instance.\r\n * @param enable - Whether Firebase Cloud Messaging should export message delivery metrics to\r\n * BigQuery.\r\n *\r\n * @public\r\n */\n\n\nfunction experimentalSetDeliveryMetricsExportedToBigQueryEnabled(messaging, enable) {\n  messaging = getModularInstance(messaging);\n  return _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nregisterMessagingInSw();\nexport { experimentalSetDeliveryMetricsExportedToBigQueryEnabled, getMessagingInSw as getMessaging, isSwSupported as isSupported, onBackgroundMessage };","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;;;;;;;;;;AAoBO,MAAMA,iBAAiB,GAC5B,yFADK;AAGA,MAAMC,QAAQ,GAAG,4CAAjB;AAEP;;AACO,MAAMC,OAAO,GAAG,SAAhB;AAEA,MAAMC,mBAAmB,GAAG,iBAA5B,C,CAeP;;AACO,MAAMC,gBAAgB,GAAG,CAAzB;AACA,MAAMC,uBAAuB,GAAG,CAAhC;AAEP,IAAYC,aAAZ;;AAAA,WAAYA,WAAZ,EAAuB;AACrBA;AACAA;AACD,CAHD,EAAYA,aAAW,KAAXA,aAAW,MAAvB;AC/CA;;;;;;;;;;;;;;;;AAqDA,IAAYA,WAAZ;;AAAA,WAAYA,WAAZ,EAAuB;AACrBA;AACAA;AACD,CAHD,EAAYA,WAAW,KAAXA,WAAW,MAAvB;ACrDA;;;;;;;;;;;;;;;;;;SAiBgBC,cAAcC,OAA+B;AAC3D,QAAMC,UAAU,GAAG,IAAIC,UAAJ,CAAeF,KAAf,CAAnB;AACA,QAAMG,YAAY,GAAGC,IAAI,CAACC,MAAM,CAACC,YAAP,CAAoB,GAAGL,UAAvB,CAAD,CAAzB;AACA,SAAOE,YAAY,CAACI,OAAb,CAAqB,IAArB,EAA2B,EAA3B,EAA+BA,OAA/B,CAAuC,KAAvC,EAA8C,GAA9C,EAAmDA,OAAnD,CAA2D,KAA3D,EAAkE,GAAlE,CAAP;AACD;;SAEeC,cAAcL,cAAoB;AAChD,QAAMM,OAAO,GAAG,IAAIC,MAAJ,CAAW,CAAC,IAAKP,YAAY,CAACQ,MAAb,GAAsB,CAA5B,IAAkC,CAA7C,CAAhB;AACA,QAAMC,MAAM,GAAG,CAACT,YAAY,GAAGM,OAAhB,EACZF,OADY,CACJ,KADI,EACG,GADH,EAEZA,OAFY,CAEJ,IAFI,EAEE,GAFF,CAAf;AAIA,QAAMM,OAAO,GAAGC,IAAI,CAACF,MAAD,CAApB;AACA,QAAMG,WAAW,GAAG,IAAIb,UAAJ,CAAeW,OAAO,CAACF,MAAvB,CAApB;;AAEA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACF,MAA5B,EAAoC,EAAEK,CAAtC,EAAyC;AACvCD,eAAW,CAACC,CAAD,CAAX,GAAiBH,OAAO,CAACI,UAAR,CAAmBD,CAAnB,CAAjB;AACD;;AACD,SAAOD,WAAP;AACF;ACpCA;;;;;;;;;;;;;;;;;;AA6DA,MAAMG,WAAW,GAAG,sBAApB;AACA;;;;;AAIA,MAAMC,cAAc,GAAG,CAAvB;AACA,MAAMC,qBAAqB,GAAG,wBAA9B;;AAEO,eAAeC,kBAAf,CACLC,QADK,EACW;AAEhB,MAAI,eAAeC,SAAnB,EAA8B;;;AAG5B,UAAMC,SAAS,GAAG,MAChBD,SAGD,CAACC,SAHA,EADF;AAKA,UAAMC,OAAO,GAAGD,SAAS,CAACE,GAAV,CAAcC,EAAE,IAAIA,EAAE,CAACC,IAAvB,CAAhB;;AAEA,QAAI,CAACH,OAAO,CAACI,QAAR,CAAiBX,WAAjB,CAAL,EAAoC;;AAElC,aAAO,IAAP;AACD;AACF;;AAED,MAAIY,YAAY,GAAwB,IAAxC;AAEA,QAAMH,EAAE,GAAG,MAAMI,MAAM,CAACb,WAAD,EAAcC,cAAd,EAA8B,MAAMQ,EAAN,IAAQ;;;AAC3D,QAAIA,EAAE,CAACK,UAAH,GAAgB,CAApB,EAAuB;;AAErB;AACD;;AAED,QAAI,CAACL,EAAE,CAACM,gBAAH,CAAoBC,QAApB,CAA6Bd,qBAA7B,CAAL,EAA0D;;AAExD;AACD;;AAED,UAAMe,WAAW,GAAGR,EAAE,CAACS,WAAH,CAAeD,WAAf,CAA2Bf,qBAA3B,CAApB;AACA,UAAMiB,KAAK,GAAG,MAAMF,WAAW,CAACG,KAAZ,CAAkB,aAAlB,EAAiCC,GAAjC,CAAqCjB,QAArC,CAApB;AACA,UAAMa,WAAW,CAACK,KAAZ,EAAN;;AAEA,QAAI,CAACH,KAAL,EAAY;;AAEV;AACD;;AAED,QAAIV,EAAE,CAACK,UAAH,KAAkB,CAAtB,EAAyB;AACvB,YAAMS,UAAU,GAAGJ,KAAnB;;AAEA,UAAI,CAACI,UAAU,CAACC,IAAZ,IAAoB,CAACD,UAAU,CAACE,MAAhC,IAA0C,CAACF,UAAU,CAACG,QAA1D,EAAoE;AAClE;AACD;;AAEDd,kBAAY,GAAG;AACbe,aAAK,EAAEJ,UAAU,CAACK,QADL;AAEbC,kBAAU,EAAE,gBAAU,CAACA,UAAX,MAAqB,IAArB,IAAqBC,aAArB,GAAqBA,EAArB,GAAyBC,IAAI,CAACC,GAAL,EAFxB;AAGbC,2BAAmB,EAAE;AACnBT,cAAI,EAAED,UAAU,CAACC,IADE;AAEnBC,gBAAM,EAAEF,UAAU,CAACE,MAFA;AAGnBC,kBAAQ,EAAEH,UAAU,CAACG,QAHF;AAInBQ,iBAAO,EAAEX,UAAU,CAACW,OAJD;AAKnBC,kBAAQ,EACN,OAAOZ,UAAU,CAACY,QAAlB,KAA+B,QAA/B,GACIZ,UAAU,CAACY,QADf,GAEItD,aAAa,CAAC0C,UAAU,CAACY,QAAZ;AARA;AAHR,OAAf;AAcD,KArBD,MAqBO,IAAI1B,EAAE,CAACK,UAAH,KAAkB,CAAtB,EAAyB;AAC9B,YAAMS,UAAU,GAAGJ,KAAnB;AAEAP,kBAAY,GAAG;AACbe,aAAK,EAAEJ,UAAU,CAACK,QADL;AAEbC,kBAAU,EAAEN,UAAU,CAACM,UAFV;AAGbI,2BAAmB,EAAE;AACnBT,cAAI,EAAE3C,aAAa,CAAC0C,UAAU,CAACC,IAAZ,CADA;AAEnBC,gBAAM,EAAE5C,aAAa,CAAC0C,UAAU,CAACE,MAAZ,CAFF;AAGnBC,kBAAQ,EAAEH,UAAU,CAACG,QAHF;AAInBQ,iBAAO,EAAEX,UAAU,CAACW,OAJD;AAKnBC,kBAAQ,EAAEtD,aAAa,CAAC0C,UAAU,CAACY,QAAZ;AALJ;AAHR,OAAf;AAWD,KAdM,MAcA,IAAI1B,EAAE,CAACK,UAAH,KAAkB,CAAtB,EAAyB;AAC9B,YAAMS,UAAU,GAAGJ,KAAnB;AAEAP,kBAAY,GAAG;AACbe,aAAK,EAAEJ,UAAU,CAACK,QADL;AAEbC,kBAAU,EAAEN,UAAU,CAACM,UAFV;AAGbI,2BAAmB,EAAE;AACnBT,cAAI,EAAE3C,aAAa,CAAC0C,UAAU,CAACC,IAAZ,CADA;AAEnBC,gBAAM,EAAE5C,aAAa,CAAC0C,UAAU,CAACE,MAAZ,CAFF;AAGnBC,kBAAQ,EAAEH,UAAU,CAACG,QAHF;AAInBQ,iBAAO,EAAEX,UAAU,CAACW,OAJD;AAKnBC,kBAAQ,EAAEtD,aAAa,CAAC0C,UAAU,CAACY,QAAZ;AALJ;AAHR,OAAf;AAWD;AACF,GAtEsB,CAAvB;AAuEA1B,IAAE,CAAC2B,KAAH,GA3FgB;;AA8FhB,QAAMC,QAAQ,CAACrC,WAAD,CAAd;AACA,QAAMqC,QAAQ,CAAC,sBAAD,CAAd;AACA,QAAMA,QAAQ,CAAC,WAAD,CAAd;AAEA,SAAOC,iBAAiB,CAAC1B,YAAD,CAAjB,GAAkCA,YAAlC,GAAiD,IAAxD;AACD;;AAED,SAAS0B,iBAAT,CACE1B,YADF,EACmC;AAEjC,MAAI,CAACA,YAAD,IAAiB,CAACA,YAAY,CAACqB,mBAAnC,EAAwD;AACtD,WAAO,KAAP;AACD;;AACD,QAAM;AAAEA;AAAF,MAA0BrB,YAAhC;AACA,SACE,OAAOA,YAAY,CAACiB,UAApB,KAAmC,QAAnC,IACAjB,YAAY,CAACiB,UAAb,GAA0B,CAD1B,IAEA,OAAOjB,YAAY,CAACe,KAApB,KAA8B,QAF9B,IAGAf,YAAY,CAACe,KAAb,CAAmBlC,MAAnB,GAA4B,CAH5B,IAIA,OAAOwC,mBAAmB,CAACT,IAA3B,KAAoC,QAJpC,IAKAS,mBAAmB,CAACT,IAApB,CAAyB/B,MAAzB,GAAkC,CALlC,IAMA,OAAOwC,mBAAmB,CAACR,MAA3B,KAAsC,QANtC,IAOAQ,mBAAmB,CAACR,MAApB,CAA2BhC,MAA3B,GAAoC,CAPpC,IAQA,OAAOwC,mBAAmB,CAACP,QAA3B,KAAwC,QARxC,IASAO,mBAAmB,CAACP,QAApB,CAA6BjC,MAA7B,GAAsC,CATtC,IAUA,OAAOwC,mBAAmB,CAACC,OAA3B,KAAuC,QAVvC,IAWAD,mBAAmB,CAACC,OAApB,CAA4BzC,MAA5B,GAAqC,CAXrC,IAYA,OAAOwC,mBAAmB,CAACE,QAA3B,KAAwC,QAZxC,IAaAF,mBAAmB,CAACE,QAApB,CAA6B1C,MAA7B,GAAsC,CAdxC;AAgBF;AClMA;;;;;;;;;;;;;;;;AAuBA;;;AACO,MAAM8C,aAAa,GAAG,6BAAtB;AACP,MAAMC,gBAAgB,GAAG,CAAzB;AACA,MAAMC,iBAAiB,GAAG,0BAA1B;AAEA,IAAIC,SAAS,GAAuB,IAApC;;AACA,SAASC,YAAT,GAAqB;AACnB,MAAI,CAACD,SAAL,EAAgB;AACdA,aAAS,GAAG7B,MAAM,CAAC0B,aAAD,EAAgBC,gBAAhB,EAAkCI,SAAS;;;;;AAK3D,cAAQA,SAAS,CAAC9B,UAAlB;AACE,aAAK,CAAL;AACE8B,mBAAS,CAACC,iBAAV,CAA4BJ,iBAA5B;AAFJ;AAID,KATiB,CAAlB;AAUD;;AACD,SAAOC,SAAP;AACD;AAED;;;AACO,eAAeI,KAAf,CACLC,oBADK,EAC6C;AAElD,QAAMC,GAAG,GAAGC,MAAM,CAACF,oBAAD,CAAlB;AACA,QAAMtC,EAAE,GAAG,MAAMkC,YAAY,EAA7B;AACA,QAAM/B,YAAY,GAAG,MAAMH,EAAE,CAC1BS,WADwB,CACZuB,iBADY,EAExBxB,WAFwB,CAEZwB,iBAFY,EAGxBpB,GAHwB,CAGpB2B,GAHoB,CAA3B;;AAKA,MAAIpC,YAAJ,EAAkB;AAChB,WAAOA,YAAP;AACD,GAFD,MAEO;;AAEL,UAAMsC,eAAe,GAAG,MAAM/C,kBAAkB,CAC9C4C,oBAAoB,CAACI,SAArB,CAA+B/C,QADe,CAAhD;;AAGA,QAAI8C,eAAJ,EAAqB;AACnB,YAAME,KAAK,CAACL,oBAAD,EAAuBG,eAAvB,CAAX;AACA,aAAOA,eAAP;AACD;AACF;AACF;AAED;;;AACO,eAAeE,KAAf,CACLL,oBADK,EAELnC,YAFK,EAEqB;AAE1B,QAAMoC,GAAG,GAAGC,MAAM,CAACF,oBAAD,CAAlB;AACA,QAAMtC,EAAE,GAAG,MAAMkC,YAAY,EAA7B;AACA,QAAMU,EAAE,GAAG5C,EAAE,CAACS,WAAH,CAAeuB,iBAAf,EAAkC,WAAlC,CAAX;AACA,QAAMY,EAAE,CAACpC,WAAH,CAAewB,iBAAf,EAAkCa,GAAlC,CAAsC1C,YAAtC,EAAoDoC,GAApD,CAAN;AACA,QAAMK,EAAE,CAACE,QAAT;AACA,SAAO3C,YAAP;AACD;AAED;;;AACO,eAAe4C,QAAf,CACLT,oBADK,EAC6C;AAElD,QAAMC,GAAG,GAAGC,MAAM,CAACF,oBAAD,CAAlB;AACA,QAAMtC,EAAE,GAAG,MAAMkC,YAAY,EAA7B;AACA,QAAMU,EAAE,GAAG5C,EAAE,CAACS,WAAH,CAAeuB,iBAAf,EAAkC,WAAlC,CAAX;AACA,QAAMY,EAAE,CAACpC,WAAH,CAAewB,iBAAf,EAAkCgB,MAAlC,CAAyCT,GAAzC,CAAN;AACA,QAAMK,EAAE,CAACE,QAAT;AACD;;AAWD,SAASN,MAAT,OAA2D;AAAA,MAA3C;AAAEE;AAAF,GAA2C;AACzD,SAAOA,SAAS,CAACO,KAAjB;AACF;ACzGA;;;;;;;;;;;;;;;;;;AAwCO,MAAMC,SAAS,GAAwB;AAC5C;AAAA;AAAA,KACE,iDAF0C;AAG5C;AAAA;AAAA,KACE,+CAJ0C;AAK5C;AAAA;AAAA,KACE,uDAN0C;AAO5C;AAAA;AAAA,KACE,oEAR0C;AAS5C;AAAA;AAAA,KACE,kEAV0C;AAW5C;AAAA;AAAA,KACE,0EAZ0C;AAa5C;AAAA;AAAA,KACE,kGAd0C;AAe5C;AAAA;AAAA,KACE,8EAhB0C;AAiB5C;AAAA;AAAA,KACE,oEAlB0C;AAmB5C;AAAA;AAAA,KACE,0DApB0C;AAqB5C;AAAA;AAAA,KACE,gDACA,6BAvB0C;AAwB5C;AAAA;AAAA,KACE,mEAzB0C;AA0B5C;AAAA;AAAA,KACE,uDA3B0C;AA4B5C;AAAA;AAAA,KACE,uEACA,yEA9B0C;AA+B5C;AAAA;AAAA,KACE,sEAhC0C;AAiC5C;AAAA;AAAA,KACE,gEAlC0C;AAmC5C;AAAA;AAAA,KAA+B,wCAnCa;AAoC5C;AAAA;AAAA,KACE,wEACA;AAtC0C,CAAvC;AAmDA,MAAMC,aAAa,GAAG,IAAIC,YAAJ,CAC3B,WAD2B,EAE3B,WAF2B,EAG3BF,SAH2B,CAAtB;AC3FP;;;;;;;;;;;;;;;;;AAsCO,eAAeG,eAAf,CACLf,oBADK,EAELd,mBAFK,EAEmC;AAExC,QAAM8B,OAAO,GAAG,MAAMC,UAAU,CAACjB,oBAAD,CAAhC;AACA,QAAMkB,IAAI,GAAGC,OAAO,CAACjC,mBAAD,CAApB;AAEA,QAAMkC,gBAAgB,GAAG;AACvBC,UAAM,EAAE,MADe;AAEvBL,WAFuB;AAGvBE,QAAI,EAAEI,IAAI,CAACC,SAAL,CAAeL,IAAf;AAHiB,GAAzB;AAMA,MAAIM,YAAJ;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1BC,WAAW,CAAC3B,oBAAoB,CAACI,SAAtB,CADe,EAE1BgB,gBAF0B,CAA5B;AAIAI,gBAAY,GAAG,MAAMC,QAAQ,CAACG,IAAT,EAArB;AACD,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAMhB,aAAa,CAACiB,MAAd,CAAoB;AAAA;AAApB,MAAuD;AAC3DC,eAAS,EAAEF;AADgD,KAAvD,CAAN;AAGD;;AAED,MAAIL,YAAY,CAACQ,KAAjB,EAAwB;AACtB,UAAMC,OAAO,GAAGT,YAAY,CAACQ,KAAb,CAAmBC,OAAnC;AACA,UAAMpB,aAAa,CAACiB,MAAd,CAAoB;AAAA;AAApB,MAAuD;AAC3DC,eAAS,EAAEE;AADgD,KAAvD,CAAN;AAGD;;AAED,MAAI,CAACT,YAAY,CAAC5C,KAAlB,EAAyB;AACvB,UAAMiC,aAAa,CAACiB,MAAd,CAAoB;AAAA;AAApB,KAAN;AACD;;AAED,SAAON,YAAY,CAAC5C,KAApB;AACD;;AAEM,eAAesD,kBAAf,CACLlC,oBADK,EAELnC,YAFK,EAEqB;AAE1B,QAAMmD,OAAO,GAAG,MAAMC,UAAU,CAACjB,oBAAD,CAAhC;AACA,QAAMkB,IAAI,GAAGC,OAAO,CAACtD,YAAY,CAACqB,mBAAd,CAApB;AAEA,QAAMiD,aAAa,GAAG;AACpBd,UAAM,EAAE,OADY;AAEpBL,WAFoB;AAGpBE,QAAI,EAAEI,IAAI,CAACC,SAAL,CAAeL,IAAf;AAHc,GAAtB;AAMA,MAAIM,YAAJ;;AACA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGC,WAAW,CAAC3B,oBAAoB,CAACI,SAAtB,CAAgC,IAAIvC,YAAY,CAACe,KAAK,EAD1C,EAE1BuD,aAF0B,CAA5B;AAIAX,gBAAY,GAAG,MAAMC,QAAQ,CAACG,IAAT,EAArB;AACD,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAMhB,aAAa,CAACiB,MAAd,CAAoB;AAAA;AAApB,MAAoD;AACxDC,eAAS,EAAEF;AAD6C,KAApD,CAAN;AAGD;;AAED,MAAIL,YAAY,CAACQ,KAAjB,EAAwB;AACtB,UAAMC,OAAO,GAAGT,YAAY,CAACQ,KAAb,CAAmBC,OAAnC;AACA,UAAMpB,aAAa,CAACiB,MAAd,CAAoB;AAAA;AAApB,MAAoD;AACxDC,eAAS,EAAEE;AAD6C,KAApD,CAAN;AAGD;;AAED,MAAI,CAACT,YAAY,CAAC5C,KAAlB,EAAyB;AACvB,UAAMiC,aAAa,CAACiB,MAAd,CAAoB;AAAA;AAApB,KAAN;AACD;;AAED,SAAON,YAAY,CAAC5C,KAApB;AACD;;AAEM,eAAewD,kBAAf,CACLpC,oBADK,EAELpB,KAFK,EAEQ;AAEb,QAAMoC,OAAO,GAAG,MAAMC,UAAU,CAACjB,oBAAD,CAAhC;AAEA,QAAMqC,kBAAkB,GAAG;AACzBhB,UAAM,EAAE,QADiB;AAEzBL;AAFyB,GAA3B;;AAKA,MAAI;AACF,UAAMS,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGC,WAAW,CAAC3B,oBAAoB,CAACI,SAAtB,CAAgC,IAAIxB,KAAK,EAD7B,EAE1ByD,kBAF0B,CAA5B;AAIA,UAAMb,YAAY,GAAgB,MAAMC,QAAQ,CAACG,IAAT,EAAxC;;AACA,QAAIJ,YAAY,CAACQ,KAAjB,EAAwB;AACtB,YAAMC,OAAO,GAAGT,YAAY,CAACQ,KAAb,CAAmBC,OAAnC;AACA,YAAMpB,aAAa,CAACiB,MAAd,CAAoB;AAAA;AAApB,QAAyD;AAC7DC,iBAAS,EAAEE;AADkD,OAAzD,CAAN;AAGD;AACF,GAZD,CAYE,OAAOJ,GAAP,EAAY;AACZ,UAAMhB,aAAa,CAACiB,MAAd,CAAoB;AAAA;AAApB,MAAyD;AAC7DC,eAAS,EAAEF;AADkD,KAAzD,CAAN;AAGD;AACF;;AAED,SAASF,WAAT,QAA6C;AAAA,MAAxB;AAAEW;AAAF,GAAwB;AAC3C,SAAO,GAAG9G,QAAQ,aAAa8G,SAAU,gBAAzC;AACD;;AAED,eAAerB,UAAf,QAG+B;AAAA,MAHL;AACxBb,aADwB;AAExBmC;AAFwB,GAGK;AAC7B,QAAMC,SAAS,GAAG,MAAMD,aAAa,CAACE,QAAd,EAAxB;AAEA,SAAO,IAAIC,OAAJ,CAAY;AACjB,oBAAgB,kBADC;AAEjBC,UAAM,EAAE,kBAFS;AAGjB,sBAAkBvC,SAAS,CAACwC,MAHX;AAIjB,0CAAsC,OAAOJ,SAAS;AAJrC,GAAZ,CAAP;AAMD;;AAED,SAASrB,OAAT,QAKsB;AAAA,MALL;AACfzC,UADe;AAEfD,QAFe;AAGfE,YAHe;AAIfS;AAJe,GAKK;AACpB,QAAM8B,IAAI,GAAmB;AAC3B2B,OAAG,EAAE;AACHlE,cADG;AAEHF,UAFG;AAGHC;AAHG;AADsB,GAA7B;;AAQA,MAAIU,QAAQ,KAAK7D,iBAAjB,EAAoC;AAClC2F,QAAI,CAAC2B,GAAL,CAASC,iBAAT,GAA6B1D,QAA7B;AACD;;AAED,SAAO8B,IAAP;AACF;ACzLA;;;;;;;;;;;;;;;;AAgCA;;;AACA,MAAM6B,mBAAmB,GAAG,IAAI,EAAJ,GAAS,EAAT,GAAc,EAAd,GAAmB,IAA/C,C,CAAoD;;AAE7C,eAAeC,gBAAf,CACLC,SADK,EACsB;AAE3B,QAAMC,gBAAgB,GAAG,MAAMC,mBAAmB,CAChDF,SAAS,CAACG,cADsC,EAEhDH,SAAS,CAAC7D,QAFsC,CAAlD;AAKA,QAAMF,mBAAmB,GAAwB;AAC/CE,YAAQ,EAAE6D,SAAS,CAAC7D,QAD2B;AAE/CD,WAAO,EAAE8D,SAAS,CAACG,cAAV,CAA0BC,KAFY;AAG/C1E,YAAQ,EAAEuE,gBAAgB,CAACvE,QAHoB;AAI/CF,QAAI,EAAE3C,aAAa,CAACoH,gBAAgB,CAAChD,MAAjB,CAAwB,MAAxB,CAAD,CAJ4B;AAK/CxB,UAAM,EAAE5C,aAAa,CAACoH,gBAAgB,CAAChD,MAAjB,CAAwB,QAAxB,CAAD;AAL0B,GAAjD;AAQA,QAAMrC,YAAY,GAAG,MAAMkC,KAAK,CAACkD,SAAS,CAACjD,oBAAX,CAAhC;;AACA,MAAI,CAACnC,YAAL,EAAmB;;AAEjB,WAAOyF,WAAW,CAACL,SAAS,CAACjD,oBAAX,EAAiCd,mBAAjC,CAAlB;AACD,GAHD,MAGO,IACL,CAACqE,YAAY,CAAC1F,YAAY,CAACqB,mBAAd,EAAoCA,mBAApC,CADR,EAEL;;AAEA,QAAI;AACF,YAAMkD,kBAAkB,CACtBa,SAAS,CAACjD,oBADY,EAEtBnC,YAAY,CAACe,KAFS,CAAxB;AAID,KALD,CAKE,OAAO4E,CAAP,EAAU;;AAEVC,aAAO,CAACC,IAAR,CAAaF,CAAb;AACD;;AAED,WAAOF,WAAW,CAACL,SAAS,CAACjD,oBAAX,EAAkCd,mBAAlC,CAAlB;AACD,GAfM,MAeA,IAAIF,IAAI,CAACC,GAAL,MAAcpB,YAAY,CAACiB,UAAb,GAA0BiE,mBAA5C,EAAiE;;AAEtE,WAAOY,WAAW,CAACV,SAAD,EAAY;AAC5BrE,WAAK,EAAEf,YAAY,CAACe,KADQ;AAE5BE,gBAAU,EAAEE,IAAI,CAACC,GAAL,EAFgB;AAG5BC;AAH4B,KAAZ,CAAlB;AAKD,GAPM,MAOA;;AAEL,WAAOrB,YAAY,CAACe,KAApB;AACD;AACF;AAED;;;;;;AAIO,eAAegF,mBAAf,CACLX,SADK,EACsB;AAE3B,QAAMpF,YAAY,GAAG,MAAMkC,KAAK,CAACkD,SAAS,CAACjD,oBAAX,CAAhC;;AACA,MAAInC,YAAJ,EAAkB;AAChB,UAAMuE,kBAAkB,CACtBa,SAAS,CAACjD,oBADY,EAEtBnC,YAAY,CAACe,KAFS,CAAxB;AAIA,UAAM6B,QAAQ,CAACwC,SAAS,CAACjD,oBAAX,CAAd;AACD,GAT0B;;;AAY3B,QAAMkD,gBAAgB,GACpB,MAAMD,SAAS,CAACG,cAAV,CAA0BS,WAA1B,CAAsCC,eAAtC,EADR;;AAEA,MAAIZ,gBAAJ,EAAsB;AACpB,WAAOA,gBAAgB,CAACa,WAAjB,EAAP;AACD,GAhB0B;;;AAmB3B,SAAO,IAAP;AACD;;AAED,eAAeJ,WAAf,CACEV,SADF,EAEEpF,YAFF,EAE4B;AAE1B,MAAI;AACF,UAAMmG,YAAY,GAAG,MAAM9B,kBAAkB,CAC3Ce,SAAS,CAACjD,oBADiC,EAE3CnC,YAF2C,CAA7C;AAKA,UAAMoG,mBAAmB,mCACpBpG,YADoB,GACR;AACfe,WAAK,EAAEoF,YADQ;AAEflF,gBAAU,EAAEE,IAAI,CAACC,GAAL;AAFG,KADQ,CAAzB;AAMA,UAAMoB,KAAK,CAAC4C,SAAS,CAACjD,oBAAX,EAAiCiE,mBAAjC,CAAX;AACA,WAAOD,YAAP;AACD,GAdD,CAcE,OAAOR,CAAP,EAAU;AACV,UAAMI,mBAAmB,CAACX,SAAD,CAAzB;AACA,UAAMO,CAAN;AACD;AACF;;AAED,eAAeF,WAAf,CACEtD,oBADF,EAEEd,mBAFF,EAE0C;AAExC,QAAMN,KAAK,GAAG,MAAMmC,eAAe,CACjCf,oBADiC,EAEjCd,mBAFiC,CAAnC;AAIA,QAAMrB,YAAY,GAAiB;AACjCe,SADiC;AAEjCE,cAAU,EAAEE,IAAI,CAACC,GAAL,EAFqB;AAGjCC;AAHiC,GAAnC;AAKA,QAAMmB,KAAK,CAACL,oBAAD,EAAuBnC,YAAvB,CAAX;AACA,SAAOA,YAAY,CAACe,KAApB;AACD;AAED;;;;;AAGA,eAAeuE,mBAAf,CACEC,cADF,EAEEhE,QAFF,EAEkB;AAEhB,QAAM8E,YAAY,GAAG,MAAMd,cAAc,CAACS,WAAf,CAA2BC,eAA3B,EAA3B;;AACA,MAAII,YAAJ,EAAkB;AAChB,WAAOA,YAAP;AACD;;AAED,SAAOd,cAAc,CAACS,WAAf,CAA2BM,SAA3B,CAAqC;AAC1CC,mBAAe,EAAE,IADyB;;;AAI1CC,wBAAoB,EAAE9H,aAAa,CAAC6C,QAAD;AAJO,GAArC,CAAP;AAMD;AAED;;;;;AAGA,SAASmE,YAAT,CACEe,SADF,EAEEC,cAFF,EAEqC;AAEnC,QAAMC,eAAe,GAAGD,cAAc,CAACnF,QAAf,KAA4BkF,SAAS,CAAClF,QAA9D;AACA,QAAMqF,eAAe,GAAGF,cAAc,CAAC5F,QAAf,KAA4B2F,SAAS,CAAC3F,QAA9D;AACA,QAAM+F,WAAW,GAAGH,cAAc,CAAC9F,IAAf,KAAwB6F,SAAS,CAAC7F,IAAtD;AACA,QAAMkG,aAAa,GAAGJ,cAAc,CAAC7F,MAAf,KAA0B4F,SAAS,CAAC5F,MAA1D;AAEA,SAAO8F,eAAe,IAAIC,eAAnB,IAAsCC,WAAtC,IAAqDC,aAA5D;AACF;ACxLA;;;;;;;;;;;;;;;;;;SAoBgBC,mBACdC,iBAAuC;AAEvC,QAAMC,OAAO,GAAmB;AAC9BC,QAAI,EAAEF,eAAe,CAACE,IADQ;;AAG9BC,eAAW,EAAEH,eAAe,CAACI,YAHC;;AAK9BC,aAAS,EAAEL,eAAe,CAACM;AALG,GAAhC;AAQAC,8BAA4B,CAACN,OAAD,EAAUD,eAAV,CAA5B;AACAQ,sBAAoB,CAACP,OAAD,EAAUD,eAAV,CAApB;AACAS,qBAAmB,CAACR,OAAD,EAAUD,eAAV,CAAnB;AAEA,SAAOC,OAAP;AACD;;AAED,SAASM,4BAAT,CACEN,OADF,EAEES,sBAFF,EAEgD;AAE9C,MAAI,CAACA,sBAAsB,CAACC,YAA5B,EAA0C;AACxC;AACD;;AAEDV,SAAO,CAACU,YAAR,GAAuB,EAAvB;AAEA,QAAMC,KAAK,GAAGF,sBAAsB,CAACC,YAAvB,CAAqCC,KAAnD;;AACA,MAAI,CAAC,CAACA,KAAN,EAAa;AACXX,WAAO,CAACU,YAAR,CAAsBC,KAAtB,GAA8BA,KAA9B;AACD;;AAED,QAAMvE,IAAI,GAAGqE,sBAAsB,CAACC,YAAvB,CAAqCtE,IAAlD;;AACA,MAAI,CAAC,CAACA,IAAN,EAAY;AACV4D,WAAO,CAACU,YAAR,CAAsBtE,IAAtB,GAA6BA,IAA7B;AACD;;AAED,QAAMwE,KAAK,GAAGH,sBAAsB,CAACC,YAAvB,CAAqCE,KAAnD;;AACA,MAAI,CAAC,CAACA,KAAN,EAAa;AACXZ,WAAO,CAACU,YAAR,CAAsBE,KAAtB,GAA8BA,KAA9B;AACD;AACF;;AAED,SAASL,oBAAT,CACEP,OADF,EAEES,sBAFF,EAEgD;AAE9C,MAAI,CAACA,sBAAsB,CAACI,IAA5B,EAAkC;AAChC;AACD;;AAEDb,SAAO,CAACa,IAAR,GAAeJ,sBAAsB,CAACI,IAAtC;AACD;;AAED,SAASL,mBAAT,CACER,OADF,EAEES,sBAFF,EAEgD;AAE9C,MAAI,CAACA,sBAAsB,CAACK,UAA5B,EAAwC;AACtC;AACD;;AAEDd,SAAO,CAACc,UAAR,GAAqB,EAArB;AAEA,QAAMC,IAAI,GAAGN,sBAAsB,CAACK,UAAvB,CAAmCC,IAAhD;;AACA,MAAI,CAAC,CAACA,IAAN,EAAY;AACVf,WAAO,CAACc,UAAR,CAAoBC,IAApB,GAA2BA,IAA3B;AACD,GAX6C;;;AAc9C,QAAMC,cAAc,GAAGP,sBAAsB,CAACK,UAAvB,CAAmCG,eAA1D;;AACA,MAAI,CAAC,CAACD,cAAN,EAAsB;AACpBhB,WAAO,CAACc,UAAR,CAAoBE,cAApB,GAAqCA,cAArC;AACD;AACH;AC/FA;;;;;;;;;;;;;;;;;;SAoBgBE,iBAAiBL,MAAa;;AAE5C,SAAO,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,CAAC,CAACA,IAA9B,IAAsCjK,mBAAmB,IAAIiK,IAApE;AACF;ACvBA;;;;;;;;;;;;;;;;;AAiBA;;;SACgBM,MAAMC,IAAU;AAC9B,SAAO,IAAIC,OAAJ,CAAkBC,OAAO;AAC9BC,cAAU,CAACD,OAAD,EAAUF,EAAV,CAAV;AACD,GAFM,CAAP;AAGF;ACtBA;;;;;;;;;;;;;;;;;;AAqCyBI,aAAa,CACpC,kCADoC,EAEpC,iCAFoC,CAAb;;AAKCA,aAAa,CACrC,sBADqC,EAErC,qBAFqC,CAAb;;AAiHnB,eAAeC,QAAf,CACLtD,SADK,EAEL4B,eAFK,EAEkC;AAEvC,QAAM2B,QAAQ,GAAGC,cAAc,CAC7B5B,eAD6B,EAE7B,MAAM5B,SAAS,CAACjD,oBAAV,CAA+BuC,aAA/B,CAA6CmE,KAA7C,EAFuB,CAA/B;AAKAC,0BAAwB,CAAC1D,SAAD,EAAYuD,QAAZ,CAAxB;AACD;;AAED,SAASC,cAAT,CACE5B,eADF,EAEE+B,GAFF,EAEa;;;AAEX,QAAMJ,QAAQ,GAAG,EAAjB;;;;AAIA,MAAI,CAAC,CAAC3B,eAAe,CAACE,IAAtB,EAA4B;AAC1ByB,YAAQ,CAACK,cAAT,GAA0BhC,eAAe,CAACE,IAA1C;AACD;;AAED,MAAI,CAAC,CAACF,eAAe,CAACM,YAAtB,EAAoC;AAClCqB,YAAQ,CAACM,UAAT,GAAsBjC,eAAe,CAACM,YAAtC;AACD;;AAEDqB,UAAQ,CAACO,WAAT,GAAuBH,GAAvB;;AAEA,MAAI,CAAC,CAAC/B,eAAe,CAACW,YAAtB,EAAoC;AAClCgB,YAAQ,CAACQ,YAAT,GAAwBnL,aAAW,CAACoL,oBAAZpL,CAAiCqL,QAAjCrL,EAAxB;AACD,GAFD,MAEO;AACL2K,YAAQ,CAACQ,YAAT,GAAwBnL,aAAW,CAACsL,YAAZtL,CAAyBqL,QAAzBrL,EAAxB;AACD;;AAED2K,UAAQ,CAACY,YAAT,GAAwBzL,gBAAgB,CAACuL,QAAjB,EAAxB;AACAV,UAAQ,CAACa,YAAT,GAAwBC,IAAI,CAACC,MAAL,CAAYjL,OAAZ,CAAoB,eAApB,EAAqC,EAArC,CAAxB;;AAEA,MAAI,CAAC,CAACuI,eAAe,CAACI,YAAtB,EAAoC;AAClCuB,YAAQ,CAACvB,YAAT,GAAwBJ,eAAe,CAACI,YAAxC;AACD;;AAEDuB,UAAQ,CAACgB,KAAT,GAAiB5L,uBAAuB,CAACsL,QAAxB,EAAjB;;AAEA,MAAI,CAAC,EAAC,qBAAe,CAACtB,UAAhB,MAA0B,IAA1B,IAA0B7G,aAA1B,GAA0B,MAA1B,GAA0BA,GAAEgH,eAA7B,CAAL,EAAmD;AACjDS,YAAQ,CAACT,eAAT,GAA2B,qBAAe,CAACH,UAAhB,MAA0B,IAA1B,IAA0B6B,aAA1B,GAA0B,MAA1B,GAA0BA,GAAE1B,eAAvD;AACD;;;;AAGD,SAAOS,QAAP;AACD;;AAED,SAASG,wBAAT,CACE1D,SADF,EAEEuD,QAFF,EAEoB;AAElB,QAAMkB,QAAQ,GAAG,EAAjB;;;AAGAA,UAAQ,CAACC,aAAT,GAAyBC,IAAI,CAACC,KAAL,CAAW7I,IAAI,CAACC,GAAL,EAAX,EAAuBiI,QAAvB,EAAzB;AACAQ,UAAQ,CAACI,4BAAT,GAAwCxG,IAAI,CAACC,SAAL,CAAeiF,QAAf,CAAxC,CANkB;;AASlBvD,WAAS,CAAC8E,SAAV,CAAoBC,IAApB,CAAyBN,QAAzB;AACD;;SAaepB,cAAc2B,IAAYC,IAAU;AAClD,QAAMC,WAAW,GAAG,EAApB;;AACA,OAAK,IAAIpL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkL,EAAE,CAACvL,MAAvB,EAA+BK,CAAC,EAAhC,EAAoC;AAClCoL,eAAW,CAACH,IAAZ,CAAiBC,EAAE,CAACG,MAAH,CAAUrL,CAAV,CAAjB;;AACA,QAAIA,CAAC,GAAGmL,EAAE,CAACxL,MAAX,EAAmB;AACjByL,iBAAW,CAACH,IAAZ,CAAiBE,EAAE,CAACE,MAAH,CAAUrL,CAAV,CAAjB;AACD;AACF;;AAED,SAAOoL,WAAW,CAACE,IAAZ,CAAiB,EAAjB,CAAP;AACF;ACnPA;;;;;;;;;;;;;;;;;;AA6CO,eAAeC,WAAf,CACLd,KADK,EAELvE,SAFK,EAEsB;;;AAE3B,QAAM;AAAEsF;AAAF,MAAsBf,KAA5B;;AACA,MAAI,CAACe,eAAL,EAAsB;;AAEpB,UAAM3E,mBAAmB,CAACX,SAAD,CAAzB;AACA;AACD;;AAED,QAAMpF,YAAY,GAAG,MAAMkC,KAAK,CAACkD,SAAS,CAACjD,oBAAX,CAAhC;AACA,QAAM4D,mBAAmB,CAACX,SAAD,CAAzB;AAEAA,WAAS,CAAC7D,QAAV,GACE,wBAAY,SAAZ,gBAAY,WAAZ,GAAY,MAAZ,eAAY,CAAEF,mBAAd,MAAiC,IAAjC,IAAiCH,aAAjC,GAAiC,MAAjC,GAAiCA,GAAEK,QAAnC,MAA2C,IAA3C,IAA2CqI,aAA3C,GAA2CA,EAA3C,GAA+ClM,iBADjD;AAEA,QAAMyH,gBAAgB,CAACC,SAAD,CAAtB;AACD;;AAEM,eAAeuF,MAAf,CACLhB,KADK,EAELvE,SAFK,EAEsB;AAE3B,QAAM4B,eAAe,GAAG4D,yBAAyB,CAACjB,KAAD,CAAjD;;AACA,MAAI,CAAC3C,eAAL,EAAsB;;AAEpB;AACD,GAN0B;;;AAS3B,MAAI5B,SAAS,CAACyF,wCAAd,EAAwD;AACtD,UAAMnC,QAAQ,CAACtD,SAAD,EAAY4B,eAAZ,CAAd;AACD,GAX0B;;;AAc3B,QAAM8D,UAAU,GAAG,MAAMC,aAAa,EAAtC;;AACA,MAAIC,iBAAiB,CAACF,UAAD,CAArB,EAAmC;AACjC,WAAOG,mCAAmC,CAACH,UAAD,EAAa9D,eAAb,CAA1C;AACD,GAjB0B;;;AAoB3B,MAAI,CAAC,CAACA,eAAe,CAACW,YAAtB,EAAoC;AAClC,UAAMuD,gBAAgB,CAACC,mBAAmB,CAACnE,eAAD,CAApB,CAAtB;AACD;;AAED,MAAI,CAAC5B,SAAL,EAAgB;AACd;AACD;;AAED,MAAI,CAAC,CAACA,SAAS,CAACgG,0BAAhB,EAA4C;AAC1C,UAAMnE,OAAO,GAAGF,kBAAkB,CAACC,eAAD,CAAlC;;AAEA,QAAI,OAAO5B,SAAS,CAACgG,0BAAjB,KAAgD,UAApD,EAAgE;AAC9DhG,eAAS,CAACgG,0BAAV,CAAqCnE,OAArC;AACD,KAFD,MAEO;AACL7B,eAAS,CAACgG,0BAAV,CAAqCC,IAArC,CAA0CpE,OAA1C;AACD;AACF;AACF;;AAEM,eAAeqE,mBAAf,CACL3B,KADK,EACmB;;;AAExB,QAAM3C,eAAe,GACnB,iBAAK,CAACW,YAAN,MAAkB,IAAlB,IAAkBzG,aAAlB,GAAkB,MAAlB,GAAkBA,GAAE4G,IAApB,MAAwB,IAAxB,IAAwB8B,aAAxB,GAAwB,MAAxB,GAAwBA,GAAGhM,OAAH,CAD1B;;AAGA,MAAI,CAACoJ,eAAL,EAAsB;AACpB;AACD,GAFD,MAEO,IAAI2C,KAAK,CAAC4B,MAAV,EAAkB;;;AAGvB;AACD,GAXuB;;;AAcxB5B,OAAK,CAAC6B,wBAAN;AACA7B,OAAK,CAAChC,YAAN,CAAmBnG,KAAnB,GAfwB;;AAkBxB,QAAMwG,IAAI,GAAGyD,OAAO,CAACzE,eAAD,CAApB;;AACA,MAAI,CAACgB,IAAL,EAAW;AACT;AACD,GArBuB;;;AAwBxB,QAAM0D,GAAG,GAAG,IAAIC,GAAJ,CAAQ3D,IAAR,EAAcyB,IAAI,CAACmC,QAAL,CAAcC,IAA5B,CAAZ;AACA,QAAMC,SAAS,GAAG,IAAIH,GAAJ,CAAQlC,IAAI,CAACmC,QAAL,CAAclC,MAAtB,CAAlB;;AAEA,MAAIgC,GAAG,CAACK,IAAJ,KAAaD,SAAS,CAACC,IAA3B,EAAiC;AAC/B;AACD;;AAED,MAAIC,MAAM,GAAG,MAAMC,eAAe,CAACP,GAAD,CAAlC;;AAEA,MAAI,CAACM,MAAL,EAAa;AACXA,UAAM,GAAG,MAAMvC,IAAI,CAACyC,OAAL,CAAaC,UAAb,CAAwBnE,IAAxB,CAAf,CADW;;;AAKX,UAAMI,KAAK,CAAC,IAAD,CAAX;AACD,GAND,MAMO;AACL4D,UAAM,GAAG,MAAMA,MAAM,CAACI,KAAP,EAAf;AACD;;AAED,MAAI,CAACJ,MAAL,EAAa;;AAEX;AACD;;AAEDhF,iBAAe,CAACqF,WAAhB,GAA8BrO,WAAW,CAACsO,oBAA1C;AACAtF,iBAAe,CAACuF,mBAAhB,GAAsC,IAAtC;AACA,SAAOP,MAAM,CAACQ,WAAP,CAAmBxF,eAAnB,CAAP;AACD;;AAED,SAASmE,mBAAT,CACEnE,eADF,EACyC;AAEvC,QAAMyF,sBAAsB,qBACtBzF,eAAe,CAACW,YADM,CAA5B,CAFuC;;;;AASvC8E,wBAAsB,CAAC3E,IAAvB,GAA8B;AAC5B,KAAClK,OAAD,GAAWoJ;AADiB,GAA9B;AAIA,SAAOyF,sBAAP;AACD;;AAED,SAAS7B,yBAAT,QAEY;AAAA,MAFuB;AACjC9C;AADiC,GAEvB;;AACV,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,MAAI;AACF,WAAOA,IAAI,CAAC/D,IAAL,EAAP;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;;AAEZ,WAAO,IAAP;AACD;AACF;AAED;;;;;;AAIA,eAAeiI,eAAf,CAA+BP,GAA/B,EAAuC;AACrC,QAAMZ,UAAU,GAAG,MAAMC,aAAa,EAAtC;;AAEA,OAAK,MAAMiB,MAAX,IAAqBlB,UAArB,EAAiC;AAC/B,UAAM4B,SAAS,GAAG,IAAIf,GAAJ,CAAQK,MAAM,CAACN,GAAf,EAAoBjC,IAAI,CAACmC,QAAL,CAAcC,IAAlC,CAAlB;;AAEA,QAAIH,GAAG,CAACK,IAAJ,KAAaW,SAAS,CAACX,IAA3B,EAAiC;AAC/B,aAAOC,MAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;AAED;;;;;;AAIA,SAAShB,iBAAT,CAA2BF,UAA3B,EAAqD;AACnD,SAAOA,UAAU,CAAC6B,IAAX,CACLX,MAAM,IACJA,MAAM,CAACY,eAAP,KAA2B,SAA3B;;AAGA,GAACZ,MAAM,CAACN,GAAP,CAAWmB,UAAX,CAAsB,qBAAtB,CALE,CAAP;AAOD;;AAED,SAAS5B,mCAAT,CACEH,UADF,EAEE9D,eAFF,EAEyC;AAEvCA,iBAAe,CAACuF,mBAAhB,GAAsC,IAAtC;AACAvF,iBAAe,CAACqF,WAAhB,GAA8BrO,WAAW,CAAC8O,aAA1C;;AAEA,OAAK,MAAMd,MAAX,IAAqBlB,UAArB,EAAiC;AAC/BkB,UAAM,CAACQ,WAAP,CAAmBxF,eAAnB;AACD;AACF;;AAED,SAAS+D,aAAT,GAAsB;AACpB,SAAOtB,IAAI,CAACyC,OAAL,CAAaa,QAAb,CAAsB;AAC3BC,QAAI,EAAE,QADqB;AAE3BC,uBAAmB,EAAE,IAFM;;AAAA,GAAtB,CAAP;AAKD;;AAED,SAAS/B,gBAAT,CACEgC,2BADF,EAC0D;SAAA;;;;AAIxD,QAAM;AAAEC;AAAF,MAAcD,2BAApB;AACA,QAAM;AAAEE;AAAF,MAAiBC,YAAvB;;AACA,MAAIF,OAAO,IAAIC,UAAX,IAAyBD,OAAO,CAACtO,MAAR,GAAiBuO,UAA9C,EAA0D;AACxDxH,WAAO,CAACC,IAAR,CACE,8BAA8BuH,UAAU,wDAD1C;AAGD;;AAED,SAAO3D,IAAI,CAAC6D,YAAL,CAAkBpC,gBAAlB;;AACQ,mCAA2B,CAACtD,KAA5B,MAAiC,IAAjC,IAAiC1G,aAAjC,GAAiCA,EAAjC,GAAqC,EAD7C,EAELgM,2BAFK,CAAP;AAID;;AAED,SAASzB,OAAT,CAAiBxE,OAAjB,EAAgD;iBAAA;;;AAE9C,QAAMe,IAAI,GAAG,mBAAO,CAACD,UAAR,MAAkB,IAAlB,IAAkB7G,aAAlB,GAAkB,MAAlB,GAAkBA,GAAE8G,IAApB,MAAwB,IAAxB,IAAwB4B,aAAxB,GAAwBA,EAAxB,GAA4B,aAAO,CAACjC,YAAR,MAAoB,IAApB,IAAoB4F,aAApB,GAAoB,MAApB,GAAoBA,GAAEC,YAA/D;;AACA,MAAIxF,IAAJ,EAAU;AACR,WAAOA,IAAP;AACD;;AAED,MAAIG,gBAAgB,CAAClB,OAAO,CAACa,IAAT,CAApB,EAAoC;;AAElC,WAAO2B,IAAI,CAACmC,QAAL,CAAclC,MAArB;AACD,GAHD,MAGO;AACL,WAAO,IAAP;AACD;AACH;ACnRA;;;;;;;;;;;;;;;;;;SAuBgB+D,iBAAiBC,KAAgB;AAC/C,MAAI,CAACA,GAAD,IAAQ,CAACA,GAAG,CAACC,OAAjB,EAA0B;AACxB,UAAMC,oBAAoB,CAAC,0BAAD,CAA1B;AACD;;AAED,MAAI,CAACF,GAAG,CAAC5N,IAAT,EAAe;AACb,UAAM8N,oBAAoB,CAAC,UAAD,CAA1B;AACD,GAP8C;;;AAU/C,QAAMC,UAAU,GAAyC,CACvD,WADuD,EAEvD,QAFuD,EAGvD,OAHuD,EAIvD,mBAJuD,CAAzD;AAOA,QAAM;AAAEF;AAAF,MAAcD,GAApB;;AACA,OAAK,MAAMI,OAAX,IAAsBD,UAAtB,EAAkC;AAChC,QAAI,CAACF,OAAO,CAACG,OAAD,CAAZ,EAAuB;AACrB,YAAMF,oBAAoB,CAACE,OAAD,CAA1B;AACD;AACF;;AAED,SAAO;AACLC,WAAO,EAAEL,GAAG,CAAC5N,IADR;AAEL2E,aAAS,EAAEkJ,OAAO,CAAClJ,SAFd;AAGLM,UAAM,EAAE4I,OAAO,CAAC5I,MAHX;AAILjC,SAAK,EAAE6K,OAAO,CAAC7K,KAJV;AAKLtD,YAAQ,EAAEmO,OAAO,CAACK;AALb,GAAP;AAOD;;AAED,SAASJ,oBAAT,CAA8BK,SAA9B,EAA+C;AAC7C,SAAOjL,aAAa,CAACiB,MAAd,CAAoB;AAAA;AAApB,IAA0D;AAC/DgK;AAD+D,GAA1D,CAAP;AAGF;AC5DA;;;;;;;;;;;;;;;;;;MA2BaC,iBAAgB;AAoB3BC,cACET,GADF,EAEEhJ,aAFF,EAGE0J,iBAHF,EAG4D;;AAhB5D,oDAAoD,KAApD;AAEA,sCAGW,IAHX;AAKA,4BACE,IADF;AAGA,qBAAwB,EAAxB;AACA,+BAA+B,KAA/B;AAOE,UAAM7L,SAAS,GAAGkL,gBAAgB,CAACC,GAAD,CAAlC;AAEA,SAAKvL,oBAAL,GAA4B;AAC1BuL,SAD0B;AAE1BnL,eAF0B;AAG1BmC,mBAH0B;AAI1B0J;AAJ0B,KAA5B;AAMD;;AAEDC,SAAO;AACL,WAAO/F,OAAO,CAACC,OAAR,EAAP;AACD;;AArC0B;AC3B7B;;;;;;;;;;;;;;;;;;AAsEA,MAAM+F,kBAAkB,GACtBC,SADuD,IAC1B;AAE7B,QAAMnJ,SAAS,GAAG,IAAI8I,gBAAJ,CAChBK,SAAS,CAACC,WAAV,CAAsB,KAAtB,EAA6BC,YAA7B,EADgB,EAEhBF,SAAS,CAACC,WAAV,CAAsB,wBAAtB,EAAgDC,YAAhD,EAFgB,EAGhBF,SAAS,CAACC,WAAV,CAAsB,oBAAtB,CAHgB,CAAlB;AAMA/E,MAAI,CAACiF,gBAAL,CAAsB,MAAtB,EAA8B/I,CAAC;AAC7BA,KAAC,CAACgJ,SAAF,CAAYhE,MAAM,CAAChF,CAAD,EAAIP,SAAJ,CAAlB;AACD,GAFD;AAGAqE,MAAI,CAACiF,gBAAL,CAAsB,wBAAtB,EAAgD/I,CAAC;AAC/CA,KAAC,CAACgJ,SAAF,CAAYlE,WAAW,CAAC9E,CAAD,EAAIP,SAAJ,CAAvB;AACD,GAFD;AAGAqE,MAAI,CAACiF,gBAAL,CAAsB,mBAAtB,EAA2C/I,CAAC;AAC1CA,KAAC,CAACgJ,SAAF,CAAYrD,mBAAmB,CAAC3F,CAAD,CAA/B;AACD,GAFD;AAIA,SAAOP,SAAP;AACD,CApBD;AAwCA;;;;;;;SAKgBwJ,wBAAqB;AACnCC,oBAAkB,CAChB,IAAIC,SAAJ,CAAc,cAAd,EAA8BR,kBAA9B,EAAgD;AAAA;AAAhD,GADgB,CAAlB;AAGF;ACvHA;;;;;;;;;;;;;;;;;AAqDA;;;;;;;;AAMO,eAAeS,aAAf,GAA4B;;;;AAIjC,SACEC,oBAAoB,OACnB,MAAMC,yBAAyB,EADZ,CAApB,IAEA,iBAAiBxF,IAFjB,IAGA,kBAAkBA,IAHlB,IAIAyF,yBAAyB,CAACC,SAA1B,CAAoCC,cAApC,CAAmD,kBAAnD,CAJA,IAKAC,gBAAgB,CAACF,SAAjB,CAA2BC,cAA3B,CAA0C,QAA1C,CANF;AAQF;ACvEA;;;;;;;;;;;;;;;;;;SA2BgBE,sBACdlK,WACAmK,gBAAiE;AAEjE,MAAI9F,IAAI,CAAC+F,QAAL,KAAkBC,SAAtB,EAAiC;AAC/B,UAAMzM,aAAa,CAACiB,MAAd,CAAoB;AAAA;AAApB,KAAN;AACD;;AAEDmB,WAAS,CAACgG,0BAAV,GAAuCmE,cAAvC;AAEA,SAAO;AACLnK,aAAS,CAACgG,0BAAV,GAAuC,IAAvC;AACD,GAFD;AAGF;ACxCA;;;;;;;;;;;;;;;;;;SAoBgBsE,6CACdtK,WACAuK,QAAe;AAEdvK,WAA8B,CAACyF,wCAA/B,GACC8E,MADD;AAEH;AC1BA;;;;;;;;;;;;;;;;;AAkEA;;;;;;;;;SAOgBC,mBAA4C;AAAA,MAA3BlC,GAA2B,uEAARmC,MAAM,EAAE;;;;;AAK1Dd,eAAa,GAAGe,IAAhB,CACEC,WAAW;;AAET,QAAI,CAACA,WAAL,EAAkB;AAChB,YAAM/M,aAAa,CAACiB,MAAd,CAAoB;AAAA;AAApB,OAAN;AACD;AACF,GANH,EAOE+L,CAAC;;AAEC,UAAMhN,aAAa,CAACiB,MAAd,CAAoB;AAAA;AAApB,KAAN;AACD,GAVH;AAYA,SAAOgM,YAAY,CAACC,kBAAkB,CAACxC,GAAD,CAAnB,EAA0B,cAA1B,CAAZ,CAAsDe,YAAtD,EAAP;AACD;AA6DD;;;;;;;;;;;;;;SAYgBa,oBACdlK,WACAmK,gBAAiE;AAEjEnK,WAAS,GAAG8K,kBAAkB,CAAC9K,SAAD,CAA9B;AACA,SAAO+K,qBAAoB,CAAC/K,SAAD,EAAgCmK,cAAhC,CAA3B;AACD;AAED;;;;;;;;;;;;;SAWgBa,wDACdhL,WACAuK,QAAe;AAEfvK,WAAS,GAAG8K,kBAAkB,CAAC9K,SAAD,CAA9B;AACA,SAAOsK,4CAA4C,CAACtK,SAAD,EAAYuK,MAAZ,CAAnD;AACF;AC7LA;;;;;;;;;;;;;;;;;;AAoCAf,qBAAqB","names":["DEFAULT_VAPID_KEY","ENDPOINT","FCM_MSG","CONSOLE_CAMPAIGN_ID","SDK_PLATFORM_WEB","EVENT_MESSAGE_DELIVERED","MessageType","arrayToBase64","array","uint8Array","Uint8Array","base64String","btoa","String","fromCharCode","replace","base64ToArray","padding","repeat","length","base64","rawData","atob","outputArray","i","charCodeAt","OLD_DB_NAME","OLD_DB_VERSION","OLD_OBJECT_STORE_NAME","migrateOldDatabase","senderId","indexedDB","databases","dbNames","map","db","name","includes","tokenDetails","openDb","oldVersion","objectStoreNames","contains","objectStore","transaction","value","index","get","clear","oldDetails","auth","p256dh","endpoint","token","fcmToken","createTime","_a","Date","now","subscriptionOptions","swScope","vapidKey","close","deleteDb","checkTokenDetails","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","getDbPromise","upgradeDb","createObjectStore","dbGet","firebaseDependencies","key","getKey","oldTokenDetails","appConfig","dbSet","tx","put","complete","dbRemove","delete","appId","ERROR_MAP","ERROR_FACTORY","ErrorFactory","requestGetToken","headers","getHeaders","body","getBody","subscribeOptions","method","JSON","stringify","responseData","response","fetch","getEndpoint","json","err","create","errorInfo","error","message","requestUpdateToken","updateOptions","requestDeleteToken","unsubscribeOptions","projectId","installations","authToken","getToken","Headers","Accept","apiKey","web","applicationPubKey","TOKEN_EXPIRATION_MS","getTokenInternal","messaging","pushSubscription","getPushSubscription","swRegistration","scope","getNewToken","isTokenValid","e","console","warn","updateToken","deleteTokenInternal","pushManager","getSubscription","unsubscribe","updatedToken","updatedTokenDetails","subscription","subscribe","userVisibleOnly","applicationServerKey","dbOptions","currentOptions","isVapidKeyEqual","isEndpointEqual","isAuthEqual","isP256dhEqual","externalizePayload","internalPayload","payload","from","collapseKey","collapse_key","messageId","fcmMessageId","propagateNotificationPayload","propagateDataPayload","propagateFcmOptions","messagePayloadInternal","notification","title","image","data","fcmOptions","link","analyticsLabel","analytics_label","isConsoleMessage","sleep","ms","Promise","resolve","setTimeout","_mergeStrings","stageLog","fcmEvent","createFcmEvent","getId","createAndEnqueueLogEvent","fid","project_number","message_id","instance_id","message_type","DISPLAY_NOTIFICATION","toString","DATA_MESSAGE","sdk_platform","package_name","self","origin","event","_b","logEvent","event_time_ms","Math","floor","source_extension_json_proto3","logEvents","push","s1","s2","resultArray","charAt","join","onSubChange","newSubscription","onPush","getMessagePayloadInternal","deliveryMetricsExportedToBigQueryEnabled","clientList","getClientList","hasVisibleClients","sendMessagePayloadInternalToWindows","showNotification","wrapInternalPayload","onBackgroundMessageHandler","next","onNotificationClick","action","stopImmediatePropagation","getLink","url","URL","location","href","originUrl","host","client","getWindowClient","clients","openWindow","focus","messageType","NOTIFICATION_CLICKED","isFirebaseMessaging","postMessage","wrappedInternalPayload","clientUrl","some","visibilityState","startsWith","PUSH_RECEIVED","matchAll","type","includeUncontrolled","notificationPayloadInternal","actions","maxActions","Notification","registration","_c","click_action","extractAppConfig","app","options","getMissingValueError","configKeys","keyName","appName","messagingSenderId","valueName","MessagingService","constructor","analyticsProvider","_delete","SwMessagingFactory","container","getProvider","getImmediate","addEventListener","waitUntil","registerMessagingInSw","_registerComponent","Component","isSwSupported","isIndexedDBAvailable","validateIndexedDBOpenable","ServiceWorkerRegistration","prototype","hasOwnProperty","PushSubscription","onBackgroundMessage","nextOrObserver","document","undefined","_setDeliveryMetricsExportedToBigQueryEnabled","enable","getMessagingInSw","getApp","then","isSupported","_","_getProvider","getModularInstance","_onBackgroundMessage","experimentalSetDeliveryMetricsExportedToBigQueryEnabled"],"sources":["/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/util/constants.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/interfaces/internal-message-payload.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/helpers/array-base64-translator.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/helpers/migrate-old-database.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/internals/idb-manager.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/util/errors.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/internals/requests.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/internals/token-manager.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/helpers/externalizePayload.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/helpers/is-console-message.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/helpers/sleep.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/helpers/logToFirelog.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/listeners/sw-listeners.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/helpers/extract-app-config.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/messaging-service.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/helpers/register.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/api/isSupported.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/api/onBackgroundMessage.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/api/setDeliveryMetricsExportedToBigQueryEnabled.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/api.ts","/Users/jaehoonpark/Desktop/깃허브/web-noti/node_modules/@firebase/messaging/src/index.sw.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n/** Key of FCM Payload in Notification's data field. */\nexport const FCM_MSG = 'FCM_MSG';\n\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\n/** Set to '1' if Analytics is enabled for the campaign */\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nexport const TAG = 'FirebaseMessaging: ';\nexport const MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST = 1000;\nexport const MAX_RETRIES = 3;\nexport const LOG_INTERVAL_IN_MS = 86400000; //24 hour\nexport const DEFAULT_BACKOFF_TIME_MS = 5000;\n\n// FCM log source name registered at Firelog: 'FCM_CLIENT_EVENT_LOGGING'. It uniquely identifies\n// FCM's logging configuration.\nexport const FCM_LOG_SOURCE = 1249;\n\n// Defined as in proto/messaging_event.proto. Neglecting fields that are supported.\nexport const SDK_PLATFORM_WEB = 3;\nexport const EVENT_MESSAGE_DELIVERED = 1;\n\nexport enum MessageType {\n  DATA_MESSAGE = 1,\n  DISPLAY_NOTIFICATION = 3\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\n\nexport interface MessagePayloadInternal {\n  notification?: NotificationPayloadInternal;\n  data?: unknown;\n  fcmOptions?: FcmOptionsInternal;\n  messageType?: MessageType;\n  isFirebaseMessaging?: boolean;\n  from: string;\n  fcmMessageId: string;\n  // eslint-disable-next-line camelcase\n  collapse_key: string;\n}\n\nexport interface NotificationPayloadInternal extends NotificationOptions {\n  title: string;\n  // Supported in the Legacy Send API.\n  // See:https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref.\n  // eslint-disable-next-line camelcase\n  click_action?: string;\n}\n\n// Defined in\n// https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions. Note\n// that the keys are sent to the clients in snake cases which we need to convert to camel so it can\n// be exposed as a type to match the Firebase API convention.\nexport interface FcmOptionsInternal {\n  link?: string;\n\n  // eslint-disable-next-line camelcase\n  analytics_label?: string;\n}\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\n/** Additional data of a message sent from the FN Console. */\nexport interface ConsoleMessageData {\n  [CONSOLE_CAMPAIGN_ID]: string;\n  [CONSOLE_CAMPAIGN_TIME]: string;\n  [CONSOLE_CAMPAIGN_NAME]?: string;\n  [CONSOLE_CAMPAIGN_ANALYTICS_ENABLED]?: '1';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteDb, openDb } from 'idb';\n\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\n * callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await (\n      indexedDB as {\n        databases(): Promise<Array<{ name: string; version: number }>>;\n      }\n    ).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDb(OLD_DB_NAME, OLD_DB_VERSION, async db => {\n    if (db.oldVersion < 2) {\n      // Database too old, skip migration.\n      return;\n    }\n\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n      // Database did not exist. Nothing to do.\n      return;\n    }\n\n    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n    const value = await objectStore.index('fcmSenderId').get(senderId);\n    await objectStore.clear();\n\n    if (!value) {\n      // No entry in the database, nothing to migrate.\n      return;\n    }\n\n    if (db.oldVersion === 2) {\n      const oldDetails = value as V2TokenDetails;\n\n      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n        return;\n      }\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime ?? Date.now(),\n        subscriptionOptions: {\n          auth: oldDetails.auth,\n          p256dh: oldDetails.p256dh,\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey:\n            typeof oldDetails.vapidKey === 'string'\n              ? oldDetails.vapidKey\n              : arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 3) {\n      const oldDetails = value as V3TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 4) {\n      const oldDetails = value as V4TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDb(OLD_DB_NAME);\n  await deleteDb('fcm_vapid_details_db');\n  await deleteDb('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, deleteDb, openDb } from 'idb';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from '../helpers/migrate-old-database';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {\n      // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n      // because if there are multiple versions between the old version and the current version, we\n      // want ALL the migrations that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.complete;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDb(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  INDEXED_DB_UNSUPPORTED = 'indexed-db-unsupported',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the Firebase SDK.\",\n  [ErrorCode.INDEXED_DB_UNSUPPORTED]:\n    \"This browser doesn't support indexedDb.open() (ex. Safari iFrame, Firefox Private Browsing, etc)\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occurred while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\nimport {\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport { dbGet, dbRemove, dbSet } from './idb-manager';\nimport {\n  requestDeleteToken,\n  requestGetToken,\n  requestUpdateToken\n} from './requests';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { MessagingService } from '../messaging-service';\n\n// UpdateRegistration will be called once every week.\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getTokenInternal(\n  messaging: MessagingService\n): Promise<string> {\n  const pushSubscription = await getPushSubscription(\n    messaging.swRegistration!,\n    messaging.vapidKey!\n  );\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey: messaging.vapidKey!,\n    swScope: messaging.swRegistration!.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(\n        messaging.firebaseDependencies!,\n        tokenDetails.token\n      );\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(messaging.firebaseDependencies!, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(messaging, {\n      token: tokenDetails.token,\n      createTime: Date.now(),\n      subscriptionOptions\n    });\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\n * the push subscription if it exists.\n */\nexport async function deleteTokenInternal(\n  messaging: MessagingService\n): Promise<boolean> {\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(\n      messaging.firebaseDependencies,\n      tokenDetails.token\n    );\n    await dbRemove(messaging.firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription =\n    await messaging.swRegistration!.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  messaging: MessagingService,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      messaging.firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      ...tokenDetails,\n      token: updatedToken,\n      createTime: Date.now()\n    };\n\n    await dbSet(messaging.firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteTokenInternal(messaging);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from '../interfaces/public-types';\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\n\nexport function externalizePayload(\n  internalPayload: MessagePayloadInternal\n): MessagePayload {\n  const payload: MessagePayload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key,\n    // eslint-disable-next-line camelcase\n    messageId: internalPayload.fcmMessageId\n  } as MessagePayload;\n\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n\n  return payload;\n}\n\nfunction propagateNotificationPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n\n  const title = messagePayloadInternal.notification!.title;\n  if (!!title) {\n    payload.notification!.title = title;\n  }\n\n  const body = messagePayloadInternal.notification!.body;\n  if (!!body) {\n    payload.notification!.body = body;\n  }\n\n  const image = messagePayloadInternal.notification!.image;\n  if (!!image) {\n    payload.notification!.image = image;\n  }\n}\n\nfunction propagateDataPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data as { [key: string]: string };\n}\n\nfunction propagateFcmOptions(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.fcmOptions) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n\n  const link = messagePayloadInternal.fcmOptions!.link;\n  if (!!link) {\n    payload.fcmOptions!.link = link;\n  }\n\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = messagePayloadInternal.fcmOptions!.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions!.analyticsLabel = analyticsLabel;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\nimport { ConsoleMessageData } from '../interfaces/internal-message-payload';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_BACKOFF_TIME_MS,\n  EVENT_MESSAGE_DELIVERED,\n  FCM_LOG_SOURCE,\n  LOG_INTERVAL_IN_MS,\n  MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST,\n  MAX_RETRIES,\n  MessageType,\n  SDK_PLATFORM_WEB\n} from '../util/constants';\nimport {\n  FcmEvent,\n  LogEvent,\n  LogRequest,\n  LogResponse\n} from '../interfaces/logging-types';\n\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\nimport { MessagingService } from '../messaging-service';\n\nconst FIRELOG_ENDPOINT = _mergeStrings(\n  'hts/frbslgigp.ogepscmv/ieo/eaylg',\n  'tp:/ieaeogn-agolai.o/1frlglgc/o'\n);\n\nconst FCM_TRANSPORT_KEY = _mergeStrings(\n  'AzSCbw63g1R0nCw85jG8',\n  'Iaya3yLKwmgvh7cF0q4'\n);\n\nexport function startLoggingService(messaging: MessagingService): void {\n  if (!messaging.isLogServiceStarted) {\n    _processQueue(messaging, LOG_INTERVAL_IN_MS);\n    messaging.isLogServiceStarted = true;\n  }\n}\n\n/**\n *\n * @param messaging the messaging instance.\n * @param offsetInMs this method execute after `offsetInMs` elapsed .\n */\nexport function _processQueue(\n  messaging: MessagingService,\n  offsetInMs: number\n): void {\n  setTimeout(async () => {\n    if (!messaging.deliveryMetricsExportedToBigQueryEnabled) {\n      // flush events and terminate logging service\n      messaging.logEvents = [];\n      messaging.isLogServiceStarted = false;\n\n      return;\n    }\n\n    if (!messaging.logEvents.length) {\n      return _processQueue(messaging, LOG_INTERVAL_IN_MS);\n    }\n\n    await _dispatchLogEvents(messaging);\n  }, offsetInMs);\n}\n\nexport async function _dispatchLogEvents(\n  messaging: MessagingService\n): Promise<void> {\n  for (\n    let i = 0, n = messaging.logEvents.length;\n    i < n;\n    i += MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST\n  ) {\n    const logRequest = _createLogRequest(\n      messaging.logEvents.slice(i, i + MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST)\n    );\n\n    let retryCount = 0,\n      response = {} as Response;\n\n    do {\n      try {\n        response = await fetch(\n          FIRELOG_ENDPOINT.concat('?key=', FCM_TRANSPORT_KEY),\n          {\n            method: 'POST',\n            body: JSON.stringify(logRequest)\n          }\n        );\n\n        // don't retry on 200s or non retriable errors\n        if (response.ok || (!response.ok && !isRetriableError(response))) {\n          break;\n        }\n\n        if (!response.ok && isRetriableError(response)) {\n          // rethrow to retry with quota\n          throw new Error(\n            'a retriable Non-200 code is returned in fetch to Firelog endpoint. Retry'\n          );\n        }\n      } catch (error) {\n        const isLastAttempt = retryCount === MAX_RETRIES;\n        if (isLastAttempt) {\n          // existing the do-while interactive retry logic because retry quota has reached.\n          break;\n        }\n      }\n\n      let delayInMs: number;\n      try {\n        delayInMs = Number(\n          ((await response.json()) as LogResponse).nextRequestWaitMillis\n        );\n      } catch (e) {\n        delayInMs = DEFAULT_BACKOFF_TIME_MS;\n      }\n\n      await new Promise(resolve => setTimeout(resolve, delayInMs));\n\n      retryCount++;\n    } while (retryCount < MAX_RETRIES);\n  }\n\n  messaging.logEvents = [];\n  // schedule for next logging\n  _processQueue(messaging, LOG_INTERVAL_IN_MS);\n}\n\nfunction isRetriableError(response: Response): boolean {\n  const httpStatus = response.status;\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\nexport async function stageLog(\n  messaging: MessagingService,\n  internalPayload: MessagePayloadInternal\n): Promise<void> {\n  const fcmEvent = createFcmEvent(\n    internalPayload,\n    await messaging.firebaseDependencies.installations.getId()\n  );\n\n  createAndEnqueueLogEvent(messaging, fcmEvent);\n}\n\nfunction createFcmEvent(\n  internalPayload: MessagePayloadInternal,\n  fid: string\n): FcmEvent {\n  const fcmEvent = {} as FcmEvent;\n\n  /* eslint-disable camelcase */\n  // some fields should always be non-null. Still check to ensure.\n  if (!!internalPayload.from) {\n    fcmEvent.project_number = internalPayload.from;\n  }\n\n  if (!!internalPayload.fcmMessageId) {\n    fcmEvent.message_id = internalPayload.fcmMessageId;\n  }\n\n  fcmEvent.instance_id = fid;\n\n  if (!!internalPayload.notification) {\n    fcmEvent.message_type = MessageType.DISPLAY_NOTIFICATION.toString();\n  } else {\n    fcmEvent.message_type = MessageType.DATA_MESSAGE.toString();\n  }\n\n  fcmEvent.sdk_platform = SDK_PLATFORM_WEB.toString();\n  fcmEvent.package_name = self.origin.replace(/(^\\w+:|^)\\/\\//, '');\n\n  if (!!internalPayload.collapse_key) {\n    fcmEvent.collapse_key = internalPayload.collapse_key;\n  }\n\n  fcmEvent.event = EVENT_MESSAGE_DELIVERED.toString();\n\n  if (!!internalPayload.fcmOptions?.analytics_label) {\n    fcmEvent.analytics_label = internalPayload.fcmOptions?.analytics_label;\n  }\n\n  /* eslint-enable camelcase */\n  return fcmEvent;\n}\n\nfunction createAndEnqueueLogEvent(\n  messaging: MessagingService,\n  fcmEvent: FcmEvent\n): void {\n  const logEvent = {} as LogEvent;\n\n  /* eslint-disable camelcase */\n  logEvent.event_time_ms = Math.floor(Date.now()).toString();\n  logEvent.source_extension_json_proto3 = JSON.stringify(fcmEvent);\n  // eslint-disable-next-line camelcase\n\n  messaging.logEvents.push(logEvent);\n}\n\nexport function _createLogRequest(logEventQueue: LogEvent[]): LogRequest {\n  const logRequest = {} as LogRequest;\n\n  /* eslint-disable camelcase */\n  logRequest.log_source = FCM_LOG_SOURCE.toString();\n  logRequest.log_event = logEventQueue;\n  /* eslint-enable camelcase */\n\n  return logRequest;\n}\n\nexport function _mergeStrings(s1: string, s2: string): string {\n  const resultArray = [];\n  for (let i = 0; i < s1.length; i++) {\n    resultArray.push(s1.charAt(i));\n    if (i < s2.length) {\n      resultArray.push(s2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, FCM_MSG } from '../util/constants';\nimport {\n  MessagePayloadInternal,\n  MessageType,\n  NotificationPayloadInternal\n} from '../interfaces/internal-message-payload';\nimport {\n  NotificationEvent,\n  PushEvent,\n  PushSubscriptionChangeEvent,\n  ServiceWorkerGlobalScope,\n  WindowClient\n} from '../util/sw-types';\nimport {\n  deleteTokenInternal,\n  getTokenInternal\n} from '../internals/token-manager';\n\nimport { MessagingService } from '../messaging-service';\nimport { dbGet } from '../internals/idb-manager';\nimport { externalizePayload } from '../helpers/externalizePayload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { sleep } from '../helpers/sleep';\nimport { stageLog } from '../helpers/logToFirelog';\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport async function onSubChange(\n  event: PushSubscriptionChangeEvent,\n  messaging: MessagingService\n): Promise<void> {\n  const { newSubscription } = event;\n  if (!newSubscription) {\n    // Subscription revoked, delete token\n    await deleteTokenInternal(messaging);\n    return;\n  }\n\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  await deleteTokenInternal(messaging);\n\n  messaging.vapidKey =\n    tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n  await getTokenInternal(messaging);\n}\n\nexport async function onPush(\n  event: PushEvent,\n  messaging: MessagingService\n): Promise<void> {\n  const internalPayload = getMessagePayloadInternal(event);\n  if (!internalPayload) {\n    // Failed to get parsed MessagePayload from the PushEvent. Skip handling the push.\n    return;\n  }\n\n  // log to Firelog with user consent\n  if (messaging.deliveryMetricsExportedToBigQueryEnabled) {\n    await stageLog(messaging, internalPayload);\n  }\n\n  // foreground handling: eventually passed to onMessage hook\n  const clientList = await getClientList();\n  if (hasVisibleClients(clientList)) {\n    return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n  }\n\n  // background handling: display if possible and pass to onBackgroundMessage hook\n  if (!!internalPayload.notification) {\n    await showNotification(wrapInternalPayload(internalPayload));\n  }\n\n  if (!messaging) {\n    return;\n  }\n\n  if (!!messaging.onBackgroundMessageHandler) {\n    const payload = externalizePayload(internalPayload);\n\n    if (typeof messaging.onBackgroundMessageHandler === 'function') {\n      messaging.onBackgroundMessageHandler(payload);\n    } else {\n      messaging.onBackgroundMessageHandler.next(payload);\n    }\n  }\n}\n\nexport async function onNotificationClick(\n  event: NotificationEvent\n): Promise<void> {\n  const internalPayload: MessagePayloadInternal =\n    event.notification?.data?.[FCM_MSG];\n\n  if (!internalPayload) {\n    return;\n  } else if (event.action) {\n    // User clicked on an action button. This will allow developers to act on action button clicks\n    // by using a custom onNotificationClick listener that they define.\n    return;\n  }\n\n  // Prevent other listeners from receiving the event\n  event.stopImmediatePropagation();\n  event.notification.close();\n\n  // Note clicking on a notification with no link set will focus the Chrome's current tab.\n  const link = getLink(internalPayload);\n  if (!link) {\n    return;\n  }\n\n  // FM should only open/focus links from app's origin.\n  const url = new URL(link, self.location.href);\n  const originUrl = new URL(self.location.origin);\n\n  if (url.host !== originUrl.host) {\n    return;\n  }\n\n  let client = await getWindowClient(url);\n\n  if (!client) {\n    client = await self.clients.openWindow(link);\n\n    // Wait three seconds for the client to initialize and set up the message handler so that it\n    // can receive the message.\n    await sleep(3000);\n  } else {\n    client = await client.focus();\n  }\n\n  if (!client) {\n    // Window Client will not be returned if it's for a third party origin.\n    return;\n  }\n\n  internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n  internalPayload.isFirebaseMessaging = true;\n  return client.postMessage(internalPayload);\n}\n\nfunction wrapInternalPayload(\n  internalPayload: MessagePayloadInternal\n): NotificationPayloadInternal {\n  const wrappedInternalPayload: NotificationPayloadInternal = {\n    ...(internalPayload.notification as unknown as NotificationPayloadInternal)\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal({\n  data\n}: PushEvent): MessagePayloadInternal | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: URL): Promise<WindowClient | null> {\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\n * otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages of extensions, which\n      // are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\nfunction sendMessagePayloadInternalToWindows(\n  clientList: WindowClient[],\n  internalPayload: MessagePayloadInternal\n): void {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction showNotification(\n  notificationPayloadInternal: NotificationPayloadInternal\n): Promise<void> {\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const { actions } = notificationPayloadInternal;\n  const { maxActions } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(\n    /* title= */ notificationPayloadInternal.title ?? '',\n    notificationPayloadInternal\n  );\n}\n\nfunction getLink(payload: MessagePayloadInternal): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseError } from '@firebase/util';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { MessagePayload, NextFn, Observer } from './interfaces/public-types';\n\nimport { FirebaseAnalyticsInternalName } from '@firebase/analytics-interop-types';\nimport { FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport { LogEvent } from './interfaces/logging-types';\nimport { Provider } from '@firebase/component';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { extractAppConfig } from './helpers/extract-app-config';\n\nexport class MessagingService implements _FirebaseService {\n  readonly app!: FirebaseApp;\n  readonly firebaseDependencies!: FirebaseInternalDependencies;\n\n  swRegistration?: ServiceWorkerRegistration;\n  vapidKey?: string;\n  // logging is only done with end user consent. Default to false.\n  deliveryMetricsExportedToBigQueryEnabled: boolean = false;\n\n  onBackgroundMessageHandler:\n    | NextFn<MessagePayload>\n    | Observer<MessagePayload>\n    | null = null;\n\n  onMessageHandler: NextFn<MessagePayload> | Observer<MessagePayload> | null =\n    null;\n\n  logEvents: LogEvent[] = [];\n  isLogServiceStarted: boolean = false;\n\n  constructor(\n    app: FirebaseApp,\n    installations: _FirebaseInstallationsInternal,\n    analyticsProvider: Provider<FirebaseAnalyticsInternalName>\n  ) {\n    const appConfig = extractAppConfig(app);\n\n    this.firebaseDependencies = {\n      app,\n      appConfig,\n      installations,\n      analyticsProvider\n    };\n  }\n\n  _delete(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactory\n} from '@firebase/component';\nimport {\n  onNotificationClick,\n  onPush,\n  onSubChange\n} from '../listeners/sw-listeners';\n\nimport { GetTokenOptions } from '../interfaces/public-types';\nimport { MessagingInternal } from '@firebase/messaging-interop-types';\nimport { MessagingService } from '../messaging-service';\nimport { ServiceWorkerGlobalScope } from '../util/sw-types';\nimport { _registerComponent, registerVersion } from '@firebase/app';\nimport { getToken } from '../api/getToken';\nimport { messageEventListener } from '../listeners/window-listener';\n\nimport { name, version } from '../../package.json';\n\nconst WindowMessagingFactory: InstanceFactory<'messaging'> = (\n  container: ComponentContainer\n) => {\n  const messaging = new MessagingService(\n    container.getProvider('app').getImmediate(),\n    container.getProvider('installations-internal').getImmediate(),\n    container.getProvider('analytics-internal')\n  );\n\n  navigator.serviceWorker.addEventListener('message', e =>\n    messageEventListener(messaging as MessagingService, e)\n  );\n\n  return messaging;\n};\n\nconst WindowMessagingInternalFactory: InstanceFactory<'messaging-internal'> = (\n  container: ComponentContainer\n) => {\n  const messaging = container\n    .getProvider('messaging')\n    .getImmediate() as MessagingService;\n\n  const messagingInternal: MessagingInternal = {\n    getToken: (options?: GetTokenOptions) => getToken(messaging, options)\n  };\n\n  return messagingInternal;\n};\n\ndeclare const self: ServiceWorkerGlobalScope;\nconst SwMessagingFactory: InstanceFactory<'messaging'> = (\n  container: ComponentContainer\n) => {\n  const messaging = new MessagingService(\n    container.getProvider('app').getImmediate(),\n    container.getProvider('installations-internal').getImmediate(),\n    container.getProvider('analytics-internal')\n  );\n\n  self.addEventListener('push', e => {\n    e.waitUntil(onPush(e, messaging as MessagingService));\n  });\n  self.addEventListener('pushsubscriptionchange', e => {\n    e.waitUntil(onSubChange(e, messaging as MessagingService));\n  });\n  self.addEventListener('notificationclick', e => {\n    e.waitUntil(onNotificationClick(e));\n  });\n\n  return messaging;\n};\n\nexport function registerMessagingInWindow(): void {\n  _registerComponent(\n    new Component('messaging', WindowMessagingFactory, ComponentType.PUBLIC)\n  );\n\n  _registerComponent(\n    new Component(\n      'messaging-internal',\n      WindowMessagingInternalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\n/**\n * The messaging instance registered in sw is named differently than that of in client. This is\n * because both `registerMessagingInWindow` and `registerMessagingInSw` would be called in\n * `messaging-compat` and component with the same name can only be registered once.\n */\nexport function registerMessagingInSw(): void {\n  _registerComponent(\n    new Component('messaging-sw', SwMessagingFactory, ComponentType.PUBLIC)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  areCookiesEnabled,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\n\n/**\n * Checks if all required APIs exist in the browser.\n * @returns a Promise that resolves to a boolean.\n *\n * @public\n */\nexport async function isWindowSupported(): Promise<boolean> {\n  try {\n    // This throws if open() is unsupported, so adding it to the conditional\n    // statement below can cause an uncaught error.\n    await validateIndexedDBOpenable();\n  } catch (e) {\n    return false;\n  }\n  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\n  // might be prohibited to run. In these contexts, an error would be thrown during the messaging\n  // instantiating phase, informing the developers to import/call isSupported for special handling.\n  return (\n    typeof window !== 'undefined' &&\n    isIndexedDBAvailable() &&\n    areCookiesEnabled() &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks whether all required APIs exist within SW Context\n * @returns a Promise that resolves to a boolean.\n *\n * @public\n */\nexport async function isSwSupported(): Promise<boolean> {\n  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\n  // might be prohibited to run. In these contexts, an error would be thrown during the messaging\n  // instantiating phase, informing the developers to import/call isSupported for special handling.\n  return (\n    isIndexedDBAvailable() &&\n    (await validateIndexedDBOpenable()) &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport {\n  MessagePayload,\n  NextFn,\n  Observer,\n  Unsubscribe\n} from '../interfaces/public-types';\nimport { MessagingService } from '../messaging-service';\n\nexport function onBackgroundMessage(\n  messaging: MessagingService,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  if (self.document !== undefined) {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  messaging.onBackgroundMessageHandler = nextOrObserver;\n\n  return () => {\n    messaging.onBackgroundMessageHandler = null;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Messaging } from '../interfaces/public-types';\nimport { MessagingService } from '../messaging-service';\n\nexport function _setDeliveryMetricsExportedToBigQueryEnabled(\n  messaging: Messaging,\n  enable: boolean\n): void {\n  (messaging as MessagingService).deliveryMetricsExportedToBigQueryEnabled =\n    enable;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './util/errors';\nimport { FirebaseApp, _getProvider, getApp } from '@firebase/app';\nimport {\n  GetTokenOptions,\n  MessagePayload,\n  Messaging\n} from './interfaces/public-types';\nimport {\n  NextFn,\n  Observer,\n  Unsubscribe,\n  getModularInstance\n} from '@firebase/util';\nimport { isSwSupported, isWindowSupported } from './api/isSupported';\n\nimport { MessagingService } from './messaging-service';\nimport { deleteToken as _deleteToken } from './api/deleteToken';\nimport { getToken as _getToken } from './api/getToken';\nimport { onBackgroundMessage as _onBackgroundMessage } from './api/onBackgroundMessage';\nimport { onMessage as _onMessage } from './api/onMessage';\nimport { _setDeliveryMetricsExportedToBigQueryEnabled } from './api/setDeliveryMetricsExportedToBigQueryEnabled';\n\n/**\n * Retrieves a Firebase Cloud Messaging instance.\n *\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\n *\n * @public\n */\nexport function getMessagingInWindow(app: FirebaseApp = getApp()): Messaging {\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isWindowSupported().then(\n    isSupported => {\n      // If `isWindowSupported()` resolved, but returned false.\n      if (!isSupported) {\n        throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n      }\n    },\n    _ => {\n      // If `isWindowSupported()` rejected.\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNSUPPORTED);\n    }\n  );\n  return _getProvider(getModularInstance(app), 'messaging').getImmediate();\n}\n\n/**\n * Retrieves a Firebase Cloud Messaging instance.\n *\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\n *\n * @public\n */\nexport function getMessagingInSw(app: FirebaseApp = getApp()): Messaging {\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isSwSupported().then(\n    isSupported => {\n      // If `isSwSupported()` resolved, but returned false.\n      if (!isSupported) {\n        throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n      }\n    },\n    _ => {\n      // If `isSwSupported()` rejected.\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNSUPPORTED);\n    }\n  );\n  return _getProvider(getModularInstance(app), 'messaging-sw').getImmediate();\n}\n\n/**\n * Subscribes the {@link Messaging} instance to push notifications. Returns an Firebase Cloud\n * Messaging registration token that can be used to send push messages to that {@link Messaging}\n * instance.\n *\n * If a notification permission isn't already granted, this method asks the user for permission. The\n * returned promise rejects if the user does not allow the app to show notifications.\n *\n * @param messaging - The {@link Messaging} instance.\n * @param options - Provides an optional vapid key and an optinoal service worker registration\n *\n * @returns The promise resolves with an FCM registration token.\n *\n * @public\n */\nexport async function getToken(\n  messaging: Messaging,\n  options?: GetTokenOptions\n): Promise<string> {\n  messaging = getModularInstance(messaging);\n  return _getToken(messaging as MessagingService, options);\n}\n\n/**\n * Deletes the registration token associated with this {@link Messaging} instance and unsubscribes\n * the {@link Messaging} instance from the push subscription.\n *\n * @param messaging - The {@link Messaging} instance.\n *\n * @returns The promise resolves when the token has been successfully deleted.\n *\n * @public\n */\nexport function deleteToken(messaging: Messaging): Promise<boolean> {\n  messaging = getModularInstance(messaging);\n  return _deleteToken(messaging as MessagingService);\n}\n\n/**\n * When a push message is received and the user is currently on a page for your origin, the\n * message is passed to the page and an `onMessage()` event is dispatched with the payload of\n * the push message.\n *\n *\n * @param messaging - The {@link Messaging} instance.\n * @param nextOrObserver - This function, or observer object with `next` defined,\n *     is called when a message is received and the user is currently viewing your page.\n * @returns To stop listening for messages execute this returned function.\n *\n * @public\n */\nexport function onMessage(\n  messaging: Messaging,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  messaging = getModularInstance(messaging);\n  return _onMessage(messaging as MessagingService, nextOrObserver);\n}\n\n/**\n * Called when a message is received while the app is in the background. An app is considered to be\n * in the background if no active window is displayed.\n *\n * @param messaging - The {@link Messaging} instance.\n * @param nextOrObserver - This function, or observer object with `next` defined, is called when a\n * message is received and the app is currently in the background.\n *\n * @returns To stop listening for messages execute this returned function\n *\n * @public\n */\nexport function onBackgroundMessage(\n  messaging: Messaging,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe {\n  messaging = getModularInstance(messaging);\n  return _onBackgroundMessage(messaging as MessagingService, nextOrObserver);\n}\n\n/**\n * Enables or disables Firebase Cloud Messaging message delivery metrics export to BigQuery. By\n * default, message delivery metrics are not exported to BigQuery. Use this method to enable or\n * disable the export at runtime.\n *\n * @param messaging - The `FirebaseMessaging` instance.\n * @param enable - Whether Firebase Cloud Messaging should export message delivery metrics to\n * BigQuery.\n *\n * @public\n */\nexport function experimentalSetDeliveryMetricsExportedToBigQueryEnabled(\n  messaging: Messaging,\n  enable: boolean\n): void {\n  messaging = getModularInstance(messaging);\n  return _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '@firebase/installations';\n\nimport { Messaging } from './interfaces/public-types';\nimport { registerMessagingInSw } from './helpers/register';\n\nexport * from './interfaces/public-types';\nexport {\n  onBackgroundMessage,\n  getMessagingInSw as getMessaging,\n  experimentalSetDeliveryMetricsExportedToBigQueryEnabled\n} from './api';\nexport { isSwSupported as isSupported } from './api/isSupported';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'messaging-sw': Messaging;\n  }\n}\n\nregisterMessagingInSw();\n"]},"metadata":{},"sourceType":"module"}