{"ast":null,"code":"import * as firebase from \"firebase/app\";\nimport { messaging } from \"firebase/messaging\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDtAnVXukt9kQgJV0den1oEhrieUNqI9_I\",\n  authDomain: \"fcm-test-e1aa5.firebaseapp.com\",\n  projectId: \"fcm-test-e1aa5\",\n  storageBucket: \"fcm-test-e1aa5.appspot.com\",\n  messagingSenderId: \"47932052637\",\n  appId: \"1:47932052637:web:1a9113193cd003ea46f074\"\n};\nfirebase.initializeApp(firebaseConfig);\nconsole.log(firebase.messaging); // const messaging = messaging();\n\nconst {\n  REACT_APP_VAPID_KEY\n} = \"BFP5fUpJBxUhvTOfaH3T1h_2nQEVDjrUj27YyAI9fMNWZBiniAprd3Tkyc4rMpnaqxunBVyIzQtrpQnkZOlTKA4\";\nconst publicKey = REACT_APP_VAPID_KEY;\nexport const getToken = setTokenFound => {\n  return messaging.getToken({\n    vapidKey: \"GENERATED_MESSAGING_KEY\"\n  }).then(currentToken => {\n    if (currentToken) {\n      console.log(\"current token for client: \", currentToken);\n      setTokenFound(true); // Track the token -> client mapping, by sending to backend server\n      // show on the UI that permission is secured\n    } else {\n      console.log(\"No registration token available. Request permission to generate one.\");\n      setTokenFound(false); // shows on the UI that permission is required\n    }\n  }).catch(err => {\n    console.log(\"An error occurred while retrieving token. \", err); // catch error while creating client token\n  });\n};\nexport const onMessageListener = () => new Promise(resolve => {\n  messaging.onMessage(payload => {\n    resolve(payload);\n  });\n});","map":{"version":3,"sources":["/Users/jaehoonpark/Desktop/깃허브/web-noti/src/firebaseInit.js"],"names":["firebase","messaging","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","initializeApp","console","log","REACT_APP_VAPID_KEY","publicKey","getToken","setTokenFound","vapidKey","then","currentToken","catch","err","onMessageListener","Promise","resolve","onMessage","payload"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,cAA1B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,gCAFS;AAGrBC,EAAAA,SAAS,EAAE,gBAHU;AAIrBC,EAAAA,aAAa,EAAE,4BAJM;AAKrBC,EAAAA,iBAAiB,EAAE,aALE;AAMrBC,EAAAA,KAAK,EAAE;AANc,CAAvB;AASAR,QAAQ,CAACS,aAAT,CAAuBP,cAAvB;AACAQ,OAAO,CAACC,GAAR,CAAYX,QAAQ,CAACC,SAArB,E,CACA;;AACA,MAAM;AAAEW,EAAAA;AAAF,IACJ,yFADF;AAEA,MAAMC,SAAS,GAAGD,mBAAlB;AAEA,OAAO,MAAME,QAAQ,GAAIC,aAAD,IAAmB;AACzC,SAAOd,SAAS,CACba,QADI,CACK;AAAEE,IAAAA,QAAQ,EAAE;AAAZ,GADL,EAEJC,IAFI,CAEEC,YAAD,IAAkB;AACtB,QAAIA,YAAJ,EAAkB;AAChBR,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CO,YAA1C;AACAH,MAAAA,aAAa,CAAC,IAAD,CAAb,CAFgB,CAGhB;AACA;AACD,KALD,MAKO;AACLL,MAAAA,OAAO,CAACC,GAAR,CACE,sEADF;AAGAI,MAAAA,aAAa,CAAC,KAAD,CAAb,CAJK,CAKL;AACD;AACF,GAfI,EAgBJI,KAhBI,CAgBGC,GAAD,IAAS;AACdV,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DS,GAA1D,EADc,CAEd;AACD,GAnBI,CAAP;AAoBD,CArBM;AAuBP,OAAO,MAAMC,iBAAiB,GAAG,MAC/B,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvBtB,EAAAA,SAAS,CAACuB,SAAV,CAAqBC,OAAD,IAAa;AAC/BF,IAAAA,OAAO,CAACE,OAAD,CAAP;AACD,GAFD;AAGD,CAJD,CADK","sourcesContent":["import * as firebase from \"firebase/app\";\nimport { messaging } from \"firebase/messaging\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDtAnVXukt9kQgJV0den1oEhrieUNqI9_I\",\n  authDomain: \"fcm-test-e1aa5.firebaseapp.com\",\n  projectId: \"fcm-test-e1aa5\",\n  storageBucket: \"fcm-test-e1aa5.appspot.com\",\n  messagingSenderId: \"47932052637\",\n  appId: \"1:47932052637:web:1a9113193cd003ea46f074\",\n};\n\nfirebase.initializeApp(firebaseConfig);\nconsole.log(firebase.messaging);\n// const messaging = messaging();\nconst { REACT_APP_VAPID_KEY } =\n  \"BFP5fUpJBxUhvTOfaH3T1h_2nQEVDjrUj27YyAI9fMNWZBiniAprd3Tkyc4rMpnaqxunBVyIzQtrpQnkZOlTKA4\";\nconst publicKey = REACT_APP_VAPID_KEY;\n\nexport const getToken = (setTokenFound) => {\n  return messaging\n    .getToken({ vapidKey: \"GENERATED_MESSAGING_KEY\" })\n    .then((currentToken) => {\n      if (currentToken) {\n        console.log(\"current token for client: \", currentToken);\n        setTokenFound(true);\n        // Track the token -> client mapping, by sending to backend server\n        // show on the UI that permission is secured\n      } else {\n        console.log(\n          \"No registration token available. Request permission to generate one.\"\n        );\n        setTokenFound(false);\n        // shows on the UI that permission is required\n      }\n    })\n    .catch((err) => {\n      console.log(\"An error occurred while retrieving token. \", err);\n      // catch error while creating client token\n    });\n};\n\nexport const onMessageListener = () =>\n  new Promise((resolve) => {\n    messaging.onMessage((payload) => {\n      resolve(payload);\n    });\n  });\n"]},"metadata":{},"sourceType":"module"}